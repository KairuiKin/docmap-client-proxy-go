// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0--rc3
// source: WebResponse.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WebResponse_RequestType int32

const (
	WebResponse_GETCONFIG         WebResponse_RequestType = 0  // 获取配置（/config/get）
	WebResponse_SEND              WebResponse_RequestType = 1  // 上传操作日志（/log/send）
	WebResponse_SENDFILE          WebResponse_RequestType = 2  // 文件方式上传操作日志（/log/sendFile）
	WebResponse_GETPOLICY         WebResponse_RequestType = 3  // 获取客户端安全策略（/policy/get）
	WebResponse_GETAPPLICATION    WebResponse_RequestType = 4  // 获取应用分类分级信息（/policy/getApplication）
	WebResponse_GETFILE           WebResponse_RequestType = 5  // 获取文件分类分级信息（/policy/getFile）
	WebResponse_GENRANDOM         WebResponse_RequestType = 6  // 生成随机数（/secure/generateRandom）
	WebResponse_LOGIN             WebResponse_RequestType = 7  // 客户端登录（/secure/login）
	WebResponse_LOGOUT            WebResponse_RequestType = 8  // 客户端登出（/secure/logout）
	WebResponse_REGKEY            WebResponse_RequestType = 9  // 注册加密私钥（/secure/registerKey）
	WebResponse_UPGRADE           WebResponse_RequestType = 10 // 获取升级信息（/upgrade）
	WebResponse_ANONYMOUSLOGIN    WebResponse_RequestType = 11 // 匿名登录（/secure/login）
	WebResponse_GETFILECATEGORIES WebResponse_RequestType = 12 // 获取文件类别范围
	WebResponse_GETFILELEVELS     WebResponse_RequestType = 13 // 获取文件密级范围
	WebResponse_STARTOUTERAUDIT   WebResponse_RequestType = 14 // 外发申请
	WebResponse_OUTERAUDIT        WebResponse_RequestType = 15 // 外发审批
)

// Enum value maps for WebResponse_RequestType.
var (
	WebResponse_RequestType_name = map[int32]string{
		0:  "GETCONFIG",
		1:  "SEND",
		2:  "SENDFILE",
		3:  "GETPOLICY",
		4:  "GETAPPLICATION",
		5:  "GETFILE",
		6:  "GENRANDOM",
		7:  "LOGIN",
		8:  "LOGOUT",
		9:  "REGKEY",
		10: "UPGRADE",
		11: "ANONYMOUSLOGIN",
		12: "GETFILECATEGORIES",
		13: "GETFILELEVELS",
		14: "STARTOUTERAUDIT",
		15: "OUTERAUDIT",
	}
	WebResponse_RequestType_value = map[string]int32{
		"GETCONFIG":         0,
		"SEND":              1,
		"SENDFILE":          2,
		"GETPOLICY":         3,
		"GETAPPLICATION":    4,
		"GETFILE":           5,
		"GENRANDOM":         6,
		"LOGIN":             7,
		"LOGOUT":            8,
		"REGKEY":            9,
		"UPGRADE":           10,
		"ANONYMOUSLOGIN":    11,
		"GETFILECATEGORIES": 12,
		"GETFILELEVELS":     13,
		"STARTOUTERAUDIT":   14,
		"OUTERAUDIT":        15,
	}
)

func (x WebResponse_RequestType) Enum() *WebResponse_RequestType {
	p := new(WebResponse_RequestType)
	*p = x
	return p
}

func (x WebResponse_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebResponse_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_WebResponse_proto_enumTypes[0].Descriptor()
}

func (WebResponse_RequestType) Type() protoreflect.EnumType {
	return &file_WebResponse_proto_enumTypes[0]
}

func (x WebResponse_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebResponse_RequestType.Descriptor instead.
func (WebResponse_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{15, 0}
}

// 错误
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码
	Msg  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // 错误提示
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_WebResponse_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() *wrapperspb.StringValue {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Error) GetMsg() *wrapperspb.StringValue {
	if x != nil {
		return x.Msg
	}
	return nil
}

// 获取配置的结果
type GetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentApiServer    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=agentApiServer,proto3,oneof" json:"agentApiServer,omitempty"`       // http接口服务器地址
	AgentSocketServer *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=agentSocketServer,proto3,oneof" json:"agentSocketServer,omitempty"` // tcp接口服务器地址
}

func (x *GetConfig) Reset() {
	*x = GetConfig{}
	mi := &file_WebResponse_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfig) ProtoMessage() {}

func (x *GetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfig.ProtoReflect.Descriptor instead.
func (*GetConfig) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{1}
}

func (x *GetConfig) GetAgentApiServer() *wrapperspb.StringValue {
	if x != nil {
		return x.AgentApiServer
	}
	return nil
}

func (x *GetConfig) GetAgentSocketServer() *wrapperspb.StringValue {
	if x != nil {
		return x.AgentSocketServer
	}
	return nil
}

// 获取安全策略
type GetPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`             // 策略版本描述
	Build      *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=build,proto3,oneof" json:"build,omitempty"`           // 版本号
	PolicyPath *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=policyPath,proto3,oneof" json:"policyPath,omitempty"` // 策略文件下载地址
}

func (x *GetPolicy) Reset() {
	*x = GetPolicy{}
	mi := &file_WebResponse_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicy) ProtoMessage() {}

func (x *GetPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicy.ProtoReflect.Descriptor instead.
func (*GetPolicy) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{2}
}

func (x *GetPolicy) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *GetPolicy) GetBuild() *wrapperspb.Int32Value {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *GetPolicy) GetPolicyPath() *wrapperspb.StringValue {
	if x != nil {
		return x.PolicyPath
	}
	return nil
}

// 获取应用分类分级信息
type GetApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExeSha1         *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=exeSha1,proto3,oneof" json:"exeSha1,omitempty"`             // 应用可执行文件的sha1值
	Classifications []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=classifications,proto3" json:"classifications,omitempty"`   // 本应用的所属分类
	SecurityLevel   *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=securityLevel,proto3,oneof" json:"securityLevel,omitempty"` // 本应用的安全级别
}

func (x *GetApplication) Reset() {
	*x = GetApplication{}
	mi := &file_WebResponse_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplication) ProtoMessage() {}

func (x *GetApplication) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplication.ProtoReflect.Descriptor instead.
func (*GetApplication) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{3}
}

func (x *GetApplication) GetExeSha1() *wrapperspb.StringValue {
	if x != nil {
		return x.ExeSha1
	}
	return nil
}

func (x *GetApplication) GetClassifications() []*wrapperspb.StringValue {
	if x != nil {
		return x.Classifications
	}
	return nil
}

func (x *GetApplication) GetSecurityLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.SecurityLevel
	}
	return nil
}

// 获取文件分类分级信息
type GetFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSha1        *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=fileSha1,proto3,oneof" json:"fileSha1,omitempty"`           // 文件的sha1值
	Classifications []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=classifications,proto3" json:"classifications,omitempty"`   // 文件所属分类
	SecurityLevel   *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=securityLevel,proto3,oneof" json:"securityLevel,omitempty"` // 文件安全级别
}

func (x *GetFile) Reset() {
	*x = GetFile{}
	mi := &file_WebResponse_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFile) ProtoMessage() {}

func (x *GetFile) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFile.ProtoReflect.Descriptor instead.
func (*GetFile) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{4}
}

func (x *GetFile) GetFileSha1() *wrapperspb.StringValue {
	if x != nil {
		return x.FileSha1
	}
	return nil
}

func (x *GetFile) GetClassifications() []*wrapperspb.StringValue {
	if x != nil {
		return x.Classifications
	}
	return nil
}

func (x *GetFile) GetSecurityLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.SecurityLevel
	}
	return nil
}

// 生成随机数
type GenerateRandom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomServer *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=randomServer,proto3,oneof" json:"randomServer,omitempty"` // 服务端随机数
}

func (x *GenerateRandom) Reset() {
	*x = GenerateRandom{}
	mi := &file_WebResponse_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateRandom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRandom) ProtoMessage() {}

func (x *GenerateRandom) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRandom.ProtoReflect.Descriptor instead.
func (*GenerateRandom) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateRandom) GetRandomServer() *wrapperspb.StringValue {
	if x != nil {
		return x.RandomServer
	}
	return nil
}

// 获取升级信息
type UpgradeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedUpdate      *wrapperspb.Int32Value  `protobuf:"bytes,1,opt,name=needUpdate,proto3,oneof" json:"needUpdate,omitempty"`           // 是否需要升级（0:不需要升级;1:可选升级;2:必须升级）
	LastBuildNumber *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=lastBuildNumber,proto3,oneof" json:"lastBuildNumber,omitempty"` // 安装程序最新版本号数值
	LastBuildString *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=lastBuildString,proto3,oneof" json:"lastBuildString,omitempty"` // 安装程序最新版本号字符串
	LastDownloadUrl *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=lastDownloadUrl,proto3,oneof" json:"lastDownloadUrl,omitempty"` // 安装程序最新版本的下载网址
}

func (x *UpgradeResult) Reset() {
	*x = UpgradeResult{}
	mi := &file_WebResponse_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResult) ProtoMessage() {}

func (x *UpgradeResult) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResult.ProtoReflect.Descriptor instead.
func (*UpgradeResult) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{6}
}

func (x *UpgradeResult) GetNeedUpdate() *wrapperspb.Int32Value {
	if x != nil {
		return x.NeedUpdate
	}
	return nil
}

func (x *UpgradeResult) GetLastBuildNumber() *wrapperspb.UInt64Value {
	if x != nil {
		return x.LastBuildNumber
	}
	return nil
}

func (x *UpgradeResult) GetLastBuildString() *wrapperspb.StringValue {
	if x != nil {
		return x.LastBuildString
	}
	return nil
}

func (x *UpgradeResult) GetLastDownloadUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.LastDownloadUrl
	}
	return nil
}

// 登入结果
type LoginResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session    *Session                `protobuf:"bytes,1,opt,name=Session,proto3,oneof" json:"Session,omitempty"`       // 会话
	RealName   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=realName,proto3,oneof" json:"realName,omitempty"`     // 姓名
	RoleName   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=roleName,proto3,oneof" json:"roleName,omitempty"`     // 角色名（暂未实现）
	OuterAudit *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=outerAudit,proto3,oneof" json:"outerAudit,omitempty"` // 审核权限：0-无权审核 1-具有审批权限
}

func (x *LoginResult) Reset() {
	*x = LoginResult{}
	mi := &file_WebResponse_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResult) ProtoMessage() {}

func (x *LoginResult) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResult.ProtoReflect.Descriptor instead.
func (*LoginResult) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{7}
}

func (x *LoginResult) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *LoginResult) GetRealName() *wrapperspb.StringValue {
	if x != nil {
		return x.RealName
	}
	return nil
}

func (x *LoginResult) GetRoleName() *wrapperspb.StringValue {
	if x != nil {
		return x.RoleName
	}
	return nil
}

func (x *LoginResult) GetOuterAudit() *wrapperspb.Int32Value {
	if x != nil {
		return x.OuterAudit
	}
	return nil
}

// 登出结果
type LogoutResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogoutResult) Reset() {
	*x = LogoutResult{}
	mi := &file_WebResponse_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResult) ProtoMessage() {}

func (x *LogoutResult) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResult.ProtoReflect.Descriptor instead.
func (*LogoutResult) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{8}
}

// 文件分类信息
type ClassificationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                  // 类别id
	Name               *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                              // 类别name|业务名称
	Code               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                              // 类别code|业务编码
	Children           []*ClassificationInfo   `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`                      // 子节点列表
	Remark             *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                          // 描述/备注
	CreateUserId       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=createUserId,proto3" json:"createUserId,omitempty"`              // 创建人id
	CreateUserName     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=createUserName,proto3" json:"createUserName,omitempty"`          // 创建人账号
	CreateUserRealname *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=createUserRealname,proto3" json:"createUserRealname,omitempty"`  // 创建人姓名
	UpdateUserId       *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=updateUserId,proto3" json:"updateUserId,omitempty"`              // 更新人id
	UpdateUserName     *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=updateUserName,proto3" json:"updateUserName,omitempty"`         // 更新人账号
	UpdateUserRealname *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=updateUserRealname,proto3" json:"updateUserRealname,omitempty"` // 更新人姓名
}

func (x *ClassificationInfo) Reset() {
	*x = ClassificationInfo{}
	mi := &file_WebResponse_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassificationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassificationInfo) ProtoMessage() {}

func (x *ClassificationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassificationInfo.ProtoReflect.Descriptor instead.
func (*ClassificationInfo) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{9}
}

func (x *ClassificationInfo) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClassificationInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ClassificationInfo) GetCode() *wrapperspb.StringValue {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ClassificationInfo) GetChildren() []*ClassificationInfo {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ClassificationInfo) GetRemark() *wrapperspb.StringValue {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *ClassificationInfo) GetCreateUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateUserId
	}
	return nil
}

func (x *ClassificationInfo) GetCreateUserName() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateUserName
	}
	return nil
}

func (x *ClassificationInfo) GetCreateUserRealname() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateUserRealname
	}
	return nil
}

func (x *ClassificationInfo) GetUpdateUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UpdateUserId
	}
	return nil
}

func (x *ClassificationInfo) GetUpdateUserName() *wrapperspb.StringValue {
	if x != nil {
		return x.UpdateUserName
	}
	return nil
}

func (x *ClassificationInfo) GetUpdateUserRealname() *wrapperspb.StringValue {
	if x != nil {
		return x.UpdateUserRealname
	}
	return nil
}

// 获取文件分类信息结果
type GetFileCategoriesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*ClassificationInfo `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"` // 分类清单
}

func (x *GetFileCategoriesResult) Reset() {
	*x = GetFileCategoriesResult{}
	mi := &file_WebResponse_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileCategoriesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCategoriesResult) ProtoMessage() {}

func (x *GetFileCategoriesResult) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCategoriesResult.ProtoReflect.Descriptor instead.
func (*GetFileCategoriesResult) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{10}
}

func (x *GetFileCategoriesResult) GetCategories() []*ClassificationInfo {
	if x != nil {
		return x.Categories
	}
	return nil
}

// 文件密级信息
type SecretLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`       // 级别id
	Name  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`   // 级别name|业务名称
	Code  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`   // 类别code|业务编码
	Grade *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=grade,proto3" json:"grade,omitempty"` // 密级等级 数值越大，级别越高；
	// 数值大的覆盖数值小的；
	//
	//	公开：100-199
	//	秘密：200-299
	//	机密：300-399
	//	绝密：400-499
	//	其它：范围保留
	Remark             *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                          // 描述/备注
	CreateUserId       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=createUserId,proto3" json:"createUserId,omitempty"`              // 创建人id
	CreateUserName     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=createUserName,proto3" json:"createUserName,omitempty"`          // 创建人账号
	CreateUserRealname *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=createUserRealname,proto3" json:"createUserRealname,omitempty"`  // 创建人姓名
	UpdateUserId       *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=updateUserId,proto3" json:"updateUserId,omitempty"`              // 更新人id
	UpdateUserName     *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=updateUserName,proto3" json:"updateUserName,omitempty"`         // 更新人账号
	UpdateUserRealname *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=updateUserRealname,proto3" json:"updateUserRealname,omitempty"` // 更新人姓名
}

func (x *SecretLevelInfo) Reset() {
	*x = SecretLevelInfo{}
	mi := &file_WebResponse_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretLevelInfo) ProtoMessage() {}

func (x *SecretLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretLevelInfo.ProtoReflect.Descriptor instead.
func (*SecretLevelInfo) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{11}
}

func (x *SecretLevelInfo) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SecretLevelInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SecretLevelInfo) GetCode() *wrapperspb.StringValue {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SecretLevelInfo) GetGrade() *wrapperspb.Int32Value {
	if x != nil {
		return x.Grade
	}
	return nil
}

func (x *SecretLevelInfo) GetRemark() *wrapperspb.StringValue {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *SecretLevelInfo) GetCreateUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateUserId
	}
	return nil
}

func (x *SecretLevelInfo) GetCreateUserName() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateUserName
	}
	return nil
}

func (x *SecretLevelInfo) GetCreateUserRealname() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateUserRealname
	}
	return nil
}

func (x *SecretLevelInfo) GetUpdateUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UpdateUserId
	}
	return nil
}

func (x *SecretLevelInfo) GetUpdateUserName() *wrapperspb.StringValue {
	if x != nil {
		return x.UpdateUserName
	}
	return nil
}

func (x *SecretLevelInfo) GetUpdateUserRealname() *wrapperspb.StringValue {
	if x != nil {
		return x.UpdateUserRealname
	}
	return nil
}

// 获取文件密级信息结果
type GetFileLevelsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Levels []*SecretLevelInfo `protobuf:"bytes,1,rep,name=levels,proto3" json:"levels,omitempty"` // 密级清单
}

func (x *GetFileLevelsResult) Reset() {
	*x = GetFileLevelsResult{}
	mi := &file_WebResponse_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileLevelsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileLevelsResult) ProtoMessage() {}

func (x *GetFileLevelsResult) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileLevelsResult.ProtoReflect.Descriptor instead.
func (*GetFileLevelsResult) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{12}
}

func (x *GetFileLevelsResult) GetLevels() []*SecretLevelInfo {
	if x != nil {
		return x.Levels
	}
	return nil
}

// 外发申请/审批的结果
type OuterAuditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditUuid *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=auditUuid,proto3" json:"auditUuid,omitempty"` // 外发审批流程唯一标识uuid（发起审核时，由服务端生成）
	FilePath  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=filePath,proto3" json:"filePath,omitempty"`   // 文件路径
	Status    *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`       // 审批状态：0-待审批 1-已撤回 2-已批准 3-已驳回
	Remark    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`       // 描述/说明/备注
}

func (x *OuterAuditResult) Reset() {
	*x = OuterAuditResult{}
	mi := &file_WebResponse_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OuterAuditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OuterAuditResult) ProtoMessage() {}

func (x *OuterAuditResult) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OuterAuditResult.ProtoReflect.Descriptor instead.
func (*OuterAuditResult) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{13}
}

func (x *OuterAuditResult) GetAuditUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.AuditUuid
	}
	return nil
}

func (x *OuterAuditResult) GetFilePath() *wrapperspb.StringValue {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *OuterAuditResult) GetStatus() *wrapperspb.Int32Value {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OuterAuditResult) GetRemark() *wrapperspb.StringValue {
	if x != nil {
		return x.Remark
	}
	return nil
}

// 结果
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetConfig         *GetConfig               `protobuf:"bytes,1,opt,name=get_config,json=getConfig,proto3,oneof" json:"get_config,omitempty"`                            // 获取配置
	GetPolicy         *GetPolicy               `protobuf:"bytes,2,opt,name=get_policy,json=getPolicy,proto3,oneof" json:"get_policy,omitempty"`                            // 获取安全策略
	GetApplication    *GetApplication          `protobuf:"bytes,3,opt,name=get_application,json=getApplication,proto3,oneof" json:"get_application,omitempty"`             // 获取应用分类分级
	GetFile           *GetFile                 `protobuf:"bytes,4,opt,name=get_file,json=getFile,proto3,oneof" json:"get_file,omitempty"`                                  // 获取文件分类分级信息
	GenerateRandom    *GenerateRandom          `protobuf:"bytes,5,opt,name=generate_random,json=generateRandom,proto3,oneof" json:"generate_random,omitempty"`             // 生成随机数
	Upgrade           *UpgradeResult           `protobuf:"bytes,6,opt,name=upgrade,proto3,oneof" json:"upgrade,omitempty"`                                                 // 获取升级信息
	Login             *LoginResult             `protobuf:"bytes,7,opt,name=login,proto3,oneof" json:"login,omitempty"`                                                     // 登入
	Logout            *LogoutResult            `protobuf:"bytes,8,opt,name=logout,proto3,oneof" json:"logout,omitempty"`                                                   // 登出
	AnonymousLogin    *LoginResult             `protobuf:"bytes,9,opt,name=anonymous_login,json=anonymousLogin,proto3,oneof" json:"anonymous_login,omitempty"`             // 匿名登录
	GetFileCategories *GetFileCategoriesResult `protobuf:"bytes,10,opt,name=get_file_categories,json=getFileCategories,proto3,oneof" json:"get_file_categories,omitempty"` // 获取文件类别信息
	GetFileLevels     *GetFileLevelsResult     `protobuf:"bytes,11,opt,name=get_file_levels,json=getFileLevels,proto3,oneof" json:"get_file_levels,omitempty"`             // 获取文件密级信息
	OuterAudit        *OuterAuditResult        `protobuf:"bytes,12,opt,name=outer_audit,json=outerAudit,proto3,oneof" json:"outer_audit,omitempty"`                        // 外发申请/审批结果
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_WebResponse_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{14}
}

func (x *Result) GetGetConfig() *GetConfig {
	if x != nil {
		return x.GetConfig
	}
	return nil
}

func (x *Result) GetGetPolicy() *GetPolicy {
	if x != nil {
		return x.GetPolicy
	}
	return nil
}

func (x *Result) GetGetApplication() *GetApplication {
	if x != nil {
		return x.GetApplication
	}
	return nil
}

func (x *Result) GetGetFile() *GetFile {
	if x != nil {
		return x.GetFile
	}
	return nil
}

func (x *Result) GetGenerateRandom() *GenerateRandom {
	if x != nil {
		return x.GenerateRandom
	}
	return nil
}

func (x *Result) GetUpgrade() *UpgradeResult {
	if x != nil {
		return x.Upgrade
	}
	return nil
}

func (x *Result) GetLogin() *LoginResult {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *Result) GetLogout() *LogoutResult {
	if x != nil {
		return x.Logout
	}
	return nil
}

func (x *Result) GetAnonymousLogin() *LoginResult {
	if x != nil {
		return x.AnonymousLogin
	}
	return nil
}

func (x *Result) GetGetFileCategories() *GetFileCategoriesResult {
	if x != nil {
		return x.GetFileCategories
	}
	return nil
}

func (x *Result) GetGetFileLevels() *GetFileLevelsResult {
	if x != nil {
		return x.GetFileLevels
	}
	return nil
}

func (x *Result) GetOuterAudit() *OuterAuditResult {
	if x != nil {
		return x.OuterAudit
	}
	return nil
}

// 网络返回
type WebResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request WebResponse_RequestType `protobuf:"varint,1,opt,name=request,proto3,enum=WebResponse_RequestType" json:"request,omitempty"` // 请求类型
	Status  *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                 // 状态（0：成功；其它：失败）
	Error   *Error                  `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`                             // 错误
	Result  *Result                 `protobuf:"bytes,4,opt,name=result,proto3,oneof" json:"result,omitempty"`                           // 结果
}

func (x *WebResponse) Reset() {
	*x = WebResponse{}
	mi := &file_WebResponse_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebResponse) ProtoMessage() {}

func (x *WebResponse) ProtoReflect() protoreflect.Message {
	mi := &file_WebResponse_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebResponse.ProtoReflect.Descriptor instead.
func (*WebResponse) Descriptor() ([]byte, []int) {
	return file_WebResponse_proto_rawDescGZIP(), []int{15}
}

func (x *WebResponse) GetRequest() WebResponse_RequestType {
	if x != nil {
		return x.Request
	}
	return WebResponse_GETCONFIG
}

func (x *WebResponse) GetStatus() *wrapperspb.Int32Value {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WebResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *WebResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_WebResponse_proto protoreflect.FileDescriptor

var file_WebResponse_proto_rawDesc = []byte{
	0x0a, 0x11, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x69, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xd0, 0x01,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0xdf, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x02, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x53, 0x68, 0x61, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x65, 0x53, 0x68, 0x61, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x65, 0x53, 0x68, 0x61, 0x31, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xf8, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x31, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x68, 0x0a, 0x0e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x45,
	0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x83, 0x03, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x65,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0xab, 0x02, 0x0a,
	0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb9, 0x05, 0x0a, 0x12, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xb8, 0x05, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xdf, 0x06, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x48, 0x01, 0x52, 0x09, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52,
	0x0e, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x03,
	0x52, 0x07, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x48, 0x04, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x07, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x05, 0x52, 0x07,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x06, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x07, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x0f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x08, 0x52, 0x0e, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x13, 0x67,
	0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x09, 0x52, 0x11, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0f, 0x67, 0x65,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x0a, 0x52, 0x0d, 0x67, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x0b, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x0b, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x57, 0x65,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x22, 0x86, 0x02, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x47, 0x45, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x4e, 0x44, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x54, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x54, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x54, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x4e, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d,
	0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x47,
	0x4b, 0x45, 0x59, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x46, 0x49, 0x4c,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x45, 0x54, 0x46, 0x49, 0x4c, 0x45, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x10, 0x0d,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x10, 0x0f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_WebResponse_proto_rawDescOnce sync.Once
	file_WebResponse_proto_rawDescData = file_WebResponse_proto_rawDesc
)

func file_WebResponse_proto_rawDescGZIP() []byte {
	file_WebResponse_proto_rawDescOnce.Do(func() {
		file_WebResponse_proto_rawDescData = protoimpl.X.CompressGZIP(file_WebResponse_proto_rawDescData)
	})
	return file_WebResponse_proto_rawDescData
}

var file_WebResponse_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_WebResponse_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_WebResponse_proto_goTypes = []any{
	(WebResponse_RequestType)(0),    // 0: WebResponse.RequestType
	(*Error)(nil),                   // 1: Error
	(*GetConfig)(nil),               // 2: GetConfig
	(*GetPolicy)(nil),               // 3: GetPolicy
	(*GetApplication)(nil),          // 4: GetApplication
	(*GetFile)(nil),                 // 5: GetFile
	(*GenerateRandom)(nil),          // 6: GenerateRandom
	(*UpgradeResult)(nil),           // 7: UpgradeResult
	(*LoginResult)(nil),             // 8: LoginResult
	(*LogoutResult)(nil),            // 9: LogoutResult
	(*ClassificationInfo)(nil),      // 10: ClassificationInfo
	(*GetFileCategoriesResult)(nil), // 11: GetFileCategoriesResult
	(*SecretLevelInfo)(nil),         // 12: SecretLevelInfo
	(*GetFileLevelsResult)(nil),     // 13: GetFileLevelsResult
	(*OuterAuditResult)(nil),        // 14: OuterAuditResult
	(*Result)(nil),                  // 15: Result
	(*WebResponse)(nil),             // 16: WebResponse
	(*wrapperspb.StringValue)(nil),  // 17: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),   // 18: google.protobuf.Int32Value
	(*wrapperspb.UInt64Value)(nil),  // 19: google.protobuf.UInt64Value
	(*Session)(nil),                 // 20: Session
}
var file_WebResponse_proto_depIdxs = []int32{
	17, // 0: Error.code:type_name -> google.protobuf.StringValue
	17, // 1: Error.msg:type_name -> google.protobuf.StringValue
	17, // 2: GetConfig.agentApiServer:type_name -> google.protobuf.StringValue
	17, // 3: GetConfig.agentSocketServer:type_name -> google.protobuf.StringValue
	17, // 4: GetPolicy.name:type_name -> google.protobuf.StringValue
	18, // 5: GetPolicy.build:type_name -> google.protobuf.Int32Value
	17, // 6: GetPolicy.policyPath:type_name -> google.protobuf.StringValue
	17, // 7: GetApplication.exeSha1:type_name -> google.protobuf.StringValue
	17, // 8: GetApplication.classifications:type_name -> google.protobuf.StringValue
	17, // 9: GetApplication.securityLevel:type_name -> google.protobuf.StringValue
	17, // 10: GetFile.fileSha1:type_name -> google.protobuf.StringValue
	17, // 11: GetFile.classifications:type_name -> google.protobuf.StringValue
	17, // 12: GetFile.securityLevel:type_name -> google.protobuf.StringValue
	17, // 13: GenerateRandom.randomServer:type_name -> google.protobuf.StringValue
	18, // 14: UpgradeResult.needUpdate:type_name -> google.protobuf.Int32Value
	19, // 15: UpgradeResult.lastBuildNumber:type_name -> google.protobuf.UInt64Value
	17, // 16: UpgradeResult.lastBuildString:type_name -> google.protobuf.StringValue
	17, // 17: UpgradeResult.lastDownloadUrl:type_name -> google.protobuf.StringValue
	20, // 18: LoginResult.Session:type_name -> Session
	17, // 19: LoginResult.realName:type_name -> google.protobuf.StringValue
	17, // 20: LoginResult.roleName:type_name -> google.protobuf.StringValue
	18, // 21: LoginResult.outerAudit:type_name -> google.protobuf.Int32Value
	17, // 22: ClassificationInfo.id:type_name -> google.protobuf.StringValue
	17, // 23: ClassificationInfo.name:type_name -> google.protobuf.StringValue
	17, // 24: ClassificationInfo.code:type_name -> google.protobuf.StringValue
	10, // 25: ClassificationInfo.children:type_name -> ClassificationInfo
	17, // 26: ClassificationInfo.remark:type_name -> google.protobuf.StringValue
	17, // 27: ClassificationInfo.createUserId:type_name -> google.protobuf.StringValue
	17, // 28: ClassificationInfo.createUserName:type_name -> google.protobuf.StringValue
	17, // 29: ClassificationInfo.createUserRealname:type_name -> google.protobuf.StringValue
	17, // 30: ClassificationInfo.updateUserId:type_name -> google.protobuf.StringValue
	17, // 31: ClassificationInfo.updateUserName:type_name -> google.protobuf.StringValue
	17, // 32: ClassificationInfo.updateUserRealname:type_name -> google.protobuf.StringValue
	10, // 33: GetFileCategoriesResult.categories:type_name -> ClassificationInfo
	17, // 34: SecretLevelInfo.id:type_name -> google.protobuf.StringValue
	17, // 35: SecretLevelInfo.name:type_name -> google.protobuf.StringValue
	17, // 36: SecretLevelInfo.code:type_name -> google.protobuf.StringValue
	18, // 37: SecretLevelInfo.grade:type_name -> google.protobuf.Int32Value
	17, // 38: SecretLevelInfo.remark:type_name -> google.protobuf.StringValue
	17, // 39: SecretLevelInfo.createUserId:type_name -> google.protobuf.StringValue
	17, // 40: SecretLevelInfo.createUserName:type_name -> google.protobuf.StringValue
	17, // 41: SecretLevelInfo.createUserRealname:type_name -> google.protobuf.StringValue
	17, // 42: SecretLevelInfo.updateUserId:type_name -> google.protobuf.StringValue
	17, // 43: SecretLevelInfo.updateUserName:type_name -> google.protobuf.StringValue
	17, // 44: SecretLevelInfo.updateUserRealname:type_name -> google.protobuf.StringValue
	12, // 45: GetFileLevelsResult.levels:type_name -> SecretLevelInfo
	17, // 46: OuterAuditResult.auditUuid:type_name -> google.protobuf.StringValue
	17, // 47: OuterAuditResult.filePath:type_name -> google.protobuf.StringValue
	18, // 48: OuterAuditResult.status:type_name -> google.protobuf.Int32Value
	17, // 49: OuterAuditResult.remark:type_name -> google.protobuf.StringValue
	2,  // 50: Result.get_config:type_name -> GetConfig
	3,  // 51: Result.get_policy:type_name -> GetPolicy
	4,  // 52: Result.get_application:type_name -> GetApplication
	5,  // 53: Result.get_file:type_name -> GetFile
	6,  // 54: Result.generate_random:type_name -> GenerateRandom
	7,  // 55: Result.upgrade:type_name -> UpgradeResult
	8,  // 56: Result.login:type_name -> LoginResult
	9,  // 57: Result.logout:type_name -> LogoutResult
	8,  // 58: Result.anonymous_login:type_name -> LoginResult
	11, // 59: Result.get_file_categories:type_name -> GetFileCategoriesResult
	13, // 60: Result.get_file_levels:type_name -> GetFileLevelsResult
	14, // 61: Result.outer_audit:type_name -> OuterAuditResult
	0,  // 62: WebResponse.request:type_name -> WebResponse.RequestType
	18, // 63: WebResponse.status:type_name -> google.protobuf.Int32Value
	1,  // 64: WebResponse.error:type_name -> Error
	15, // 65: WebResponse.result:type_name -> Result
	66, // [66:66] is the sub-list for method output_type
	66, // [66:66] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_WebResponse_proto_init() }
func file_WebResponse_proto_init() {
	if File_WebResponse_proto != nil {
		return
	}
	file_Session_proto_init()
	file_WebResponse_proto_msgTypes[1].OneofWrappers = []any{}
	file_WebResponse_proto_msgTypes[2].OneofWrappers = []any{}
	file_WebResponse_proto_msgTypes[3].OneofWrappers = []any{}
	file_WebResponse_proto_msgTypes[4].OneofWrappers = []any{}
	file_WebResponse_proto_msgTypes[5].OneofWrappers = []any{}
	file_WebResponse_proto_msgTypes[6].OneofWrappers = []any{}
	file_WebResponse_proto_msgTypes[7].OneofWrappers = []any{}
	file_WebResponse_proto_msgTypes[14].OneofWrappers = []any{}
	file_WebResponse_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_WebResponse_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_WebResponse_proto_goTypes,
		DependencyIndexes: file_WebResponse_proto_depIdxs,
		EnumInfos:         file_WebResponse_proto_enumTypes,
		MessageInfos:      file_WebResponse_proto_msgTypes,
	}.Build()
	File_WebResponse_proto = out.File
	file_WebResponse_proto_rawDesc = nil
	file_WebResponse_proto_goTypes = nil
	file_WebResponse_proto_depIdxs = nil
}
