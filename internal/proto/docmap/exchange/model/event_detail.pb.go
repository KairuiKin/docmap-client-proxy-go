// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0--rc3
// source: event_detail.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// delete 事件
type EventDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityIdentity     string   `protobuf:"bytes,1,opt,name=entityIdentity,proto3" json:"entityIdentity,omitempty"`
	ContentIdentity    []string `protobuf:"bytes,2,rep,name=contentIdentity,proto3" json:"contentIdentity,omitempty"`
	Path               string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Filename           string   `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	DriveType          string   `protobuf:"bytes,5,opt,name=driveType,proto3" json:"driveType,omitempty"`
	SecurityLevel      string   `protobuf:"bytes,6,opt,name=securityLevel,proto3" json:"securityLevel,omitempty"`
	ClassificationType []string `protobuf:"bytes,7,rep,name=classificationType,proto3" json:"classificationType,omitempty"`
	CreateTime         uint64   `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ModifyTime         uint64   `protobuf:"varint,9,opt,name=modifyTime,proto3" json:"modifyTime,omitempty"`
	Sha1               string   `protobuf:"bytes,10,opt,name=sha1,proto3" json:"sha1,omitempty"`
	Size               uint64   `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	Ext                string   `protobuf:"bytes,12,opt,name=ext,proto3" json:"ext,omitempty"`
	EncryptChannel     string   `protobuf:"bytes,13,opt,name=encryptChannel,proto3" json:"encryptChannel,omitempty"`
	OriginFilePath     string   `protobuf:"bytes,14,opt,name=originFilePath,proto3" json:"originFilePath,omitempty"` // 如果是回收站中的文件，删除时这里存放着进回收站前的路径
	Encrypted          int32    `protobuf:"varint,15,opt,name=encrypted,proto3" json:"encrypted,omitempty"`          // 是否被客户端加密过(0:未加密;1:已加密)
}

func (x *EventDelete) Reset() {
	*x = EventDelete{}
	mi := &file_event_detail_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDelete) ProtoMessage() {}

func (x *EventDelete) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDelete.ProtoReflect.Descriptor instead.
func (*EventDelete) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{0}
}

func (x *EventDelete) GetEntityIdentity() string {
	if x != nil {
		return x.EntityIdentity
	}
	return ""
}

func (x *EventDelete) GetContentIdentity() []string {
	if x != nil {
		return x.ContentIdentity
	}
	return nil
}

func (x *EventDelete) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *EventDelete) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *EventDelete) GetDriveType() string {
	if x != nil {
		return x.DriveType
	}
	return ""
}

func (x *EventDelete) GetSecurityLevel() string {
	if x != nil {
		return x.SecurityLevel
	}
	return ""
}

func (x *EventDelete) GetClassificationType() []string {
	if x != nil {
		return x.ClassificationType
	}
	return nil
}

func (x *EventDelete) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *EventDelete) GetModifyTime() uint64 {
	if x != nil {
		return x.ModifyTime
	}
	return 0
}

func (x *EventDelete) GetSha1() string {
	if x != nil {
		return x.Sha1
	}
	return ""
}

func (x *EventDelete) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *EventDelete) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *EventDelete) GetEncryptChannel() string {
	if x != nil {
		return x.EncryptChannel
	}
	return ""
}

func (x *EventDelete) GetOriginFilePath() string {
	if x != nil {
		return x.OriginFilePath
	}
	return ""
}

func (x *EventDelete) GetEncrypted() int32 {
	if x != nil {
		return x.Encrypted
	}
	return 0
}

// copy 事件
type EventCopy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile               string       `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`
	SourceFileInfo           *EventDelete `protobuf:"bytes,2,opt,name=sourceFileInfo,proto3" json:"sourceFileInfo,omitempty"` // 重定向打TAG前的文件信息（避免来源不可访问时，读取不到文件信息）
	RedirectFile             string       `protobuf:"bytes,3,opt,name=redirectFile,proto3" json:"redirectFile,omitempty"`
	DestinationFile          string       `protobuf:"bytes,4,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`
	DestinationFileDriveType string       `protobuf:"bytes,5,opt,name=destinationFileDriveType,proto3" json:"destinationFileDriveType,omitempty"` // 存放目标路径的盘符类型，防止目标路径不可访问导致服务端拼不出文件信息
	OverwriteFile            *EventDelete `protobuf:"bytes,6,opt,name=overwriteFile,proto3" json:"overwriteFile,omitempty"`
	FromManual               bool         `protobuf:"varint,7,opt,name=fromManual,proto3" json:"fromManual,omitempty"` // 手动
}

func (x *EventCopy) Reset() {
	*x = EventCopy{}
	mi := &file_event_detail_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventCopy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCopy) ProtoMessage() {}

func (x *EventCopy) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCopy.ProtoReflect.Descriptor instead.
func (*EventCopy) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{1}
}

func (x *EventCopy) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventCopy) GetSourceFileInfo() *EventDelete {
	if x != nil {
		return x.SourceFileInfo
	}
	return nil
}

func (x *EventCopy) GetRedirectFile() string {
	if x != nil {
		return x.RedirectFile
	}
	return ""
}

func (x *EventCopy) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventCopy) GetDestinationFileDriveType() string {
	if x != nil {
		return x.DestinationFileDriveType
	}
	return ""
}

func (x *EventCopy) GetOverwriteFile() *EventDelete {
	if x != nil {
		return x.OverwriteFile
	}
	return nil
}

func (x *EventCopy) GetFromManual() bool {
	if x != nil {
		return x.FromManual
	}
	return false
}

// move 事件
type EventMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile               string       `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`
	SourceFileInfo           *EventDelete `protobuf:"bytes,2,opt,name=sourceFileInfo,proto3" json:"sourceFileInfo,omitempty"` // 避免来源不可访问时，读取不到文件信息
	DestinationFile          string       `protobuf:"bytes,3,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`
	DestinationFileDriveType string       `protobuf:"bytes,4,opt,name=destinationFileDriveType,proto3" json:"destinationFileDriveType,omitempty"` // 存放目标路径的盘符类型，防止目标路径不可访问导致服务端拼不出文件信息
	OverwriteFile            *EventDelete `protobuf:"bytes,5,opt,name=overwriteFile,proto3" json:"overwriteFile,omitempty"`
	FromManual               bool         `protobuf:"varint,6,opt,name=fromManual,proto3" json:"fromManual,omitempty"` // 手动
}

func (x *EventMove) Reset() {
	*x = EventMove{}
	mi := &file_event_detail_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMove) ProtoMessage() {}

func (x *EventMove) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMove.ProtoReflect.Descriptor instead.
func (*EventMove) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{2}
}

func (x *EventMove) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventMove) GetSourceFileInfo() *EventDelete {
	if x != nil {
		return x.SourceFileInfo
	}
	return nil
}

func (x *EventMove) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventMove) GetDestinationFileDriveType() string {
	if x != nil {
		return x.DestinationFileDriveType
	}
	return ""
}

func (x *EventMove) GetOverwriteFile() *EventDelete {
	if x != nil {
		return x.OverwriteFile
	}
	return nil
}

func (x *EventMove) GetFromManual() bool {
	if x != nil {
		return x.FromManual
	}
	return false
}

// saveAs 事件
type EventSaveAs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      string `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`
	DestinationFile string `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`
}

func (x *EventSaveAs) Reset() {
	*x = EventSaveAs{}
	mi := &file_event_detail_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSaveAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSaveAs) ProtoMessage() {}

func (x *EventSaveAs) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSaveAs.ProtoReflect.Descriptor instead.
func (*EventSaveAs) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{3}
}

func (x *EventSaveAs) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventSaveAs) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

// cdburn 事件
type EventCDBurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      string       `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`
	SourceFileInfo  *EventDelete `protobuf:"bytes,2,opt,name=sourceFileInfo,proto3" json:"sourceFileInfo,omitempty"` // 重定向打TAG前的文件信息（避免来源不可访问时，读取不到文件信息）
	RedirectFile    string       `protobuf:"bytes,3,opt,name=redirectFile,proto3" json:"redirectFile,omitempty"`
	DestinationFile string       `protobuf:"bytes,4,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`
}

func (x *EventCDBurn) Reset() {
	*x = EventCDBurn{}
	mi := &file_event_detail_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventCDBurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCDBurn) ProtoMessage() {}

func (x *EventCDBurn) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCDBurn.ProtoReflect.Descriptor instead.
func (*EventCDBurn) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{4}
}

func (x *EventCDBurn) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventCDBurn) GetSourceFileInfo() *EventDelete {
	if x != nil {
		return x.SourceFileInfo
	}
	return nil
}

func (x *EventCDBurn) GetRedirectFile() string {
	if x != nil {
		return x.RedirectFile
	}
	return ""
}

func (x *EventCDBurn) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

// create 事件
type EventCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`
}

func (x *EventCreate) Reset() {
	*x = EventCreate{}
	mi := &file_event_detail_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCreate) ProtoMessage() {}

func (x *EventCreate) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCreate.ProtoReflect.Descriptor instead.
func (*EventCreate) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{5}
}

func (x *EventCreate) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

// 压缩与解压事件里使用的文件信息块
type ZipFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File     string       `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`         // 文件路径
	Fileinfo *EventDelete `protobuf:"bytes,2,opt,name=fileinfo,proto3" json:"fileinfo,omitempty"` // 预取的文件信息(当文件在边界外时有效)
}

func (x *ZipFile) Reset() {
	*x = ZipFile{}
	mi := &file_event_detail_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZipFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZipFile) ProtoMessage() {}

func (x *ZipFile) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZipFile.ProtoReflect.Descriptor instead.
func (*ZipFile) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{6}
}

func (x *ZipFile) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ZipFile) GetFileinfo() *EventDelete {
	if x != nil {
		return x.Fileinfo
	}
	return nil
}

// ZipMap符合属性
type ZipMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src *ZipFile `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Des string   `protobuf:"bytes,2,opt,name=des,proto3" json:"des,omitempty"`
}

func (x *ZipMap) Reset() {
	*x = ZipMap{}
	mi := &file_event_detail_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZipMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZipMap) ProtoMessage() {}

func (x *ZipMap) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZipMap.ProtoReflect.Descriptor instead.
func (*ZipMap) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{7}
}

func (x *ZipMap) GetSrc() *ZipFile {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *ZipMap) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

// zip 事件
type EventZip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFiles      []*ZipMap  `protobuf:"bytes,1,rep,name=sourceFiles,proto3" json:"sourceFiles,omitempty"`
	DestinationFiles []*ZipFile `protobuf:"bytes,2,rep,name=destinationFiles,proto3" json:"destinationFiles,omitempty"`
}

func (x *EventZip) Reset() {
	*x = EventZip{}
	mi := &file_event_detail_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventZip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventZip) ProtoMessage() {}

func (x *EventZip) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventZip.ProtoReflect.Descriptor instead.
func (*EventZip) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{8}
}

func (x *EventZip) GetSourceFiles() []*ZipMap {
	if x != nil {
		return x.SourceFiles
	}
	return nil
}

func (x *EventZip) GetDestinationFiles() []*ZipFile {
	if x != nil {
		return x.DestinationFiles
	}
	return nil
}

// unzip 事件
type EventUnzip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFiles      []*ZipFile `protobuf:"bytes,1,rep,name=sourceFiles,proto3" json:"sourceFiles,omitempty"`
	DestinationFiles []*ZipFile `protobuf:"bytes,2,rep,name=destinationFiles,proto3" json:"destinationFiles,omitempty"`
}

func (x *EventUnzip) Reset() {
	*x = EventUnzip{}
	mi := &file_event_detail_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUnzip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUnzip) ProtoMessage() {}

func (x *EventUnzip) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUnzip.ProtoReflect.Descriptor instead.
func (*EventUnzip) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{9}
}

func (x *EventUnzip) GetSourceFiles() []*ZipFile {
	if x != nil {
		return x.SourceFiles
	}
	return nil
}

func (x *EventUnzip) GetDestinationFiles() []*ZipFile {
	if x != nil {
		return x.DestinationFiles
	}
	return nil
}

// edit 事件
type EventEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`
}

func (x *EventEdit) Reset() {
	*x = EventEdit{}
	mi := &file_event_detail_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEdit) ProtoMessage() {}

func (x *EventEdit) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEdit.ProtoReflect.Descriptor instead.
func (*EventEdit) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{10}
}

func (x *EventEdit) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

// rename 事件
type EventRename struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      string `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`
	DestinationFile string `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`
	FromManual      bool   `protobuf:"varint,3,opt,name=fromManual,proto3" json:"fromManual,omitempty"` // 手动重命名
}

func (x *EventRename) Reset() {
	*x = EventRename{}
	mi := &file_event_detail_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRename) ProtoMessage() {}

func (x *EventRename) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRename.ProtoReflect.Descriptor instead.
func (*EventRename) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{11}
}

func (x *EventRename) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventRename) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventRename) GetFromManual() bool {
	if x != nil {
		return x.FromManual
	}
	return false
}

// recycle 事件
type EventRecycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      string `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`
	DestinationFile string `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`
}

func (x *EventRecycle) Reset() {
	*x = EventRecycle{}
	mi := &file_event_detail_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRecycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRecycle) ProtoMessage() {}

func (x *EventRecycle) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRecycle.ProtoReflect.Descriptor instead.
func (*EventRecycle) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{12}
}

func (x *EventRecycle) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventRecycle) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

// restore 事件
type EventRestore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      string `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`
	DestinationFile string `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`
}

func (x *EventRestore) Reset() {
	*x = EventRestore{}
	mi := &file_event_detail_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRestore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRestore) ProtoMessage() {}

func (x *EventRestore) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRestore.ProtoReflect.Descriptor instead.
func (*EventRestore) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{13}
}

func (x *EventRestore) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventRestore) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

type NetFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUrl string `protobuf:"bytes,1,opt,name=fileUrl,proto3" json:"fileUrl,omitempty"` // 文件网址
}

func (x *NetFileInfo) Reset() {
	*x = NetFileInfo{}
	mi := &file_event_detail_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetFileInfo) ProtoMessage() {}

func (x *NetFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetFileInfo.ProtoReflect.Descriptor instead.
func (*NetFileInfo) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{14}
}

func (x *NetFileInfo) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

type ServerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4 string `protobuf:"bytes,1,opt,name=ipv4,proto3" json:"ipv4,omitempty"`  // ipv4地址
	Ipv6 string `protobuf:"bytes,2,opt,name=ipv6,proto3" json:"ipv6,omitempty"`  // ipv6地址
	Port int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"` // 端口
	Url  string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`    // 网址
}

func (x *ServerAddress) Reset() {
	*x = ServerAddress{}
	mi := &file_event_detail_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerAddress) ProtoMessage() {}

func (x *ServerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerAddress.ProtoReflect.Descriptor instead.
func (*ServerAddress) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{15}
}

func (x *ServerAddress) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *ServerAddress) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *ServerAddress) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServerAddress) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// upload 事件
type EventUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol           string           `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`                     // 网络传输协议
	SourceFile         string           `protobuf:"bytes,2,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`                 // 要上传的本地文件路径
	DestinationServers []*ServerAddress `protobuf:"bytes,3,rep,name=destinationServers,proto3" json:"destinationServers,omitempty"` // 目标服务器地址信息
	DestinationFile    string           `protobuf:"bytes,4,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`       // 上传重定向文件的信息
	DestinationNetFile *NetFileInfo     `protobuf:"bytes,5,opt,name=destinationNetFile,proto3" json:"destinationNetFile,omitempty"` // 目标网络文件的信息
}

func (x *EventUpload) Reset() {
	*x = EventUpload{}
	mi := &file_event_detail_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUpload) ProtoMessage() {}

func (x *EventUpload) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUpload.ProtoReflect.Descriptor instead.
func (*EventUpload) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{16}
}

func (x *EventUpload) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *EventUpload) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventUpload) GetDestinationServers() []*ServerAddress {
	if x != nil {
		return x.DestinationServers
	}
	return nil
}

func (x *EventUpload) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventUpload) GetDestinationNetFile() *NetFileInfo {
	if x != nil {
		return x.DestinationNetFile
	}
	return nil
}

// download 事件
type EventDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol        string           `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`               // 网络传输协议
	SourceServers   []*ServerAddress `protobuf:"bytes,2,rep,name=sourceServers,proto3" json:"sourceServers,omitempty"`     // 要下载的服务器地址信息
	SourceNetFile   *NetFileInfo     `protobuf:"bytes,3,opt,name=sourceNetFile,proto3" json:"sourceNetFile,omitempty"`     // 来源文件网络信息
	SourceFile      string           `protobuf:"bytes,4,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 来源下载文件
	DestinationFile string           `protobuf:"bytes,5,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 目标文件的路径
}

func (x *EventDownload) Reset() {
	*x = EventDownload{}
	mi := &file_event_detail_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDownload) ProtoMessage() {}

func (x *EventDownload) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDownload.ProtoReflect.Descriptor instead.
func (*EventDownload) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{17}
}

func (x *EventDownload) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *EventDownload) GetSourceServers() []*ServerAddress {
	if x != nil {
		return x.SourceServers
	}
	return nil
}

func (x *EventDownload) GetSourceNetFile() *NetFileInfo {
	if x != nil {
		return x.SourceNetFile
	}
	return nil
}

func (x *EventDownload) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventDownload) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

// change_attributes事件
type EventChangeAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 要改变属性的文件路径
	Attributes      uint32 `protobuf:"varint,2,opt,name=attributes,proto3" json:"attributes,omitempty"`          // 要改变的属性值
}

func (x *EventChangeAttributes) Reset() {
	*x = EventChangeAttributes{}
	mi := &file_event_detail_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventChangeAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChangeAttributes) ProtoMessage() {}

func (x *EventChangeAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChangeAttributes.ProtoReflect.Descriptor instead.
func (*EventChangeAttributes) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{18}
}

func (x *EventChangeAttributes) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventChangeAttributes) GetAttributes() uint32 {
	if x != nil {
		return x.Attributes
	}
	return 0
}

// ftpsend事件
type EventFtpSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile               string           `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`                             // 要上传的本地文件路径
	DestinationFileTagFileId string           `protobuf:"bytes,2,opt,name=destinationFileTagFileId,proto3" json:"destinationFileTagFileId,omitempty"` // 上传文件的TAGID
	DestinationServers       []*ServerAddress `protobuf:"bytes,3,rep,name=destinationServers,proto3" json:"destinationServers,omitempty"`             // 目标服务器地址信息
	DestinationFile          *NetFileInfo     `protobuf:"bytes,4,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`                   // 上传后远程保存文件的信息
}

func (x *EventFtpSend) Reset() {
	*x = EventFtpSend{}
	mi := &file_event_detail_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventFtpSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFtpSend) ProtoMessage() {}

func (x *EventFtpSend) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFtpSend.ProtoReflect.Descriptor instead.
func (*EventFtpSend) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{19}
}

func (x *EventFtpSend) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventFtpSend) GetDestinationFileTagFileId() string {
	if x != nil {
		return x.DestinationFileTagFileId
	}
	return ""
}

func (x *EventFtpSend) GetDestinationServers() []*ServerAddress {
	if x != nil {
		return x.DestinationServers
	}
	return nil
}

func (x *EventFtpSend) GetDestinationFile() *NetFileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

// kill事件
type EventKill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 要终止运行的程序路径
}

func (x *EventKill) Reset() {
	*x = EventKill{}
	mi := &file_event_detail_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventKill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventKill) ProtoMessage() {}

func (x *EventKill) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventKill.ProtoReflect.Descriptor instead.
func (*EventKill) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{20}
}

func (x *EventKill) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

// run事件
type EventRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 要运行的程序路径
}

func (x *EventRun) Reset() {
	*x = EventRun{}
	mi := &file_event_detail_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRun) ProtoMessage() {}

func (x *EventRun) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRun.ProtoReflect.Descriptor instead.
func (*EventRun) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{21}
}

func (x *EventRun) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

// BeginEdit事件
type EventBeginEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 被编辑的文件路径
	BeginTime       uint64 `protobuf:"varint,2,opt,name=beginTime,proto3" json:"beginTime,omitempty"`            // 文件第一次被编辑的时间，Unix时间戳，毫秒
}

func (x *EventBeginEdit) Reset() {
	*x = EventBeginEdit{}
	mi := &file_event_detail_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBeginEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBeginEdit) ProtoMessage() {}

func (x *EventBeginEdit) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBeginEdit.ProtoReflect.Descriptor instead.
func (*EventBeginEdit) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{22}
}

func (x *EventBeginEdit) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventBeginEdit) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

// EndEdit事件
type EventEndEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 被编辑的文件路径
	EndTime         uint64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`                // 文件关闭前最后一次被编辑的时间，Unix时间戳，毫秒
}

func (x *EventEndEdit) Reset() {
	*x = EventEndEdit{}
	mi := &file_event_detail_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventEndEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEndEdit) ProtoMessage() {}

func (x *EventEndEdit) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEndEdit.ProtoReflect.Descriptor instead.
func (*EventEndEdit) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{23}
}

func (x *EventEndEdit) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventEndEdit) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// BeginRead事件
type EventBeginRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 被阅读的文件路径
	BeginTime       uint64 `protobuf:"varint,2,opt,name=beginTime,proto3" json:"beginTime,omitempty"`            // 文件第一次被打开的时间，Unix时间戳，毫秒
	Hwnd            uint64 `protobuf:"varint,3,opt,name=hwnd,proto3" json:"hwnd,omitempty"`                      // 文件对应的窗口
}

func (x *EventBeginRead) Reset() {
	*x = EventBeginRead{}
	mi := &file_event_detail_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBeginRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBeginRead) ProtoMessage() {}

func (x *EventBeginRead) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBeginRead.ProtoReflect.Descriptor instead.
func (*EventBeginRead) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{24}
}

func (x *EventBeginRead) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventBeginRead) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *EventBeginRead) GetHwnd() uint64 {
	if x != nil {
		return x.Hwnd
	}
	return 0
}

// EndRead事件
type EventEndRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 被阅读的文件路径
	EndTime         uint64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`                // 文件最后关闭的时间，Unix时间戳，毫秒
	Hwnd            uint64 `protobuf:"varint,3,opt,name=hwnd,proto3" json:"hwnd,omitempty"`                      // 文件对应的窗口
}

func (x *EventEndRead) Reset() {
	*x = EventEndRead{}
	mi := &file_event_detail_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventEndRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEndRead) ProtoMessage() {}

func (x *EventEndRead) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEndRead.ProtoReflect.Descriptor instead.
func (*EventEndRead) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{25}
}

func (x *EventEndRead) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventEndRead) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EventEndRead) GetHwnd() uint64 {
	if x != nil {
		return x.Hwnd
	}
	return 0
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format uint32 `protobuf:"varint,1,opt,name=format,proto3" json:"format,omitempty"` // 内容的格式代码
	Size   uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`     // 内容的字节大小
	Md5    string `protobuf:"bytes,3,opt,name=md5,proto3" json:"md5,omitempty"`        // 内容的md5编码值
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_event_detail_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{26}
}

func (x *Content) GetFormat() uint32 {
	if x != nil {
		return x.Format
	}
	return 0
}

func (x *Content) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Content) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

// CopyContent事件
type EventCopyContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile string     `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"` // 复制内容的来源文件路径
	Contents   []*Content `protobuf:"bytes,2,rep,name=contents,proto3" json:"contents,omitempty"`     // 复制内容清单
}

func (x *EventCopyContent) Reset() {
	*x = EventCopyContent{}
	mi := &file_event_detail_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventCopyContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCopyContent) ProtoMessage() {}

func (x *EventCopyContent) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCopyContent.ProtoReflect.Descriptor instead.
func (*EventCopyContent) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{27}
}

func (x *EventCopyContent) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventCopyContent) GetContents() []*Content {
	if x != nil {
		return x.Contents
	}
	return nil
}

// PasteContent事件
type EventPasteContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string     `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 被粘贴修改的目的文件路径
	Contents        []*Content `protobuf:"bytes,2,rep,name=contents,proto3" json:"contents,omitempty"`               // 被粘贴的内容
	DestinationWnd  uint64     `protobuf:"varint,3,opt,name=destinationWnd,proto3" json:"destinationWnd,omitempty"`  // 目标窗口句柄（目标文档未保存时需要它）
}

func (x *EventPasteContent) Reset() {
	*x = EventPasteContent{}
	mi := &file_event_detail_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventPasteContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPasteContent) ProtoMessage() {}

func (x *EventPasteContent) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPasteContent.ProtoReflect.Descriptor instead.
func (*EventPasteContent) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{28}
}

func (x *EventPasteContent) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventPasteContent) GetContents() []*Content {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *EventPasteContent) GetDestinationWnd() uint64 {
	if x != nil {
		return x.DestinationWnd
	}
	return 0
}

// 粘贴事件（内部）
type EventPasteContent_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      string `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`
	DestinationFile string `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`
	DestinationWnd  uint64 `protobuf:"varint,3,opt,name=destinationWnd,proto3" json:"destinationWnd,omitempty"` // 目标窗口句柄（策略截屏保护需要它）
}

func (x *EventPasteContent_) Reset() {
	*x = EventPasteContent_{}
	mi := &file_event_detail_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventPasteContent_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPasteContent_) ProtoMessage() {}

func (x *EventPasteContent_) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPasteContent_.ProtoReflect.Descriptor instead.
func (*EventPasteContent_) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{29}
}

func (x *EventPasteContent_) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventPasteContent_) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventPasteContent_) GetDestinationWnd() uint64 {
	if x != nil {
		return x.DestinationWnd
	}
	return 0
}

// encrypt事件
type EventEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      string `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 加密来源文件
	DestinationFile string `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 加密目标文件
}

func (x *EventEncrypt) Reset() {
	*x = EventEncrypt{}
	mi := &file_event_detail_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEncrypt) ProtoMessage() {}

func (x *EventEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEncrypt.ProtoReflect.Descriptor instead.
func (*EventEncrypt) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{30}
}

func (x *EventEncrypt) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventEncrypt) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

// decrypt事件
type EventDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 解密目标文件
}

func (x *EventDecrypt) Reset() {
	*x = EventDecrypt{}
	mi := &file_event_detail_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDecrypt) ProtoMessage() {}

func (x *EventDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDecrypt.ProtoReflect.Descriptor instead.
func (*EventDecrypt) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{31}
}

func (x *EventDecrypt) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

// InsertFile事件
type EventInsertFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      string   `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 来源文件
	DestinationFile string   `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 目标文件
	InsertedFile    []string `protobuf:"bytes,3,rep,name=insertedFile,proto3" json:"insertedFile,omitempty"`       // 被插入的文件
	DestinationWnd  uint64   `protobuf:"varint,4,opt,name=destinationWnd,proto3" json:"destinationWnd,omitempty"`  // 目标窗口句柄（目标文档未保存时需要它）
}

func (x *EventInsertFile) Reset() {
	*x = EventInsertFile{}
	mi := &file_event_detail_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventInsertFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInsertFile) ProtoMessage() {}

func (x *EventInsertFile) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInsertFile.ProtoReflect.Descriptor instead.
func (*EventInsertFile) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{32}
}

func (x *EventInsertFile) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *EventInsertFile) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

func (x *EventInsertFile) GetInsertedFile() []string {
	if x != nil {
		return x.InsertedFile
	}
	return nil
}

func (x *EventInsertFile) GetDestinationWnd() uint64 {
	if x != nil {
		return x.DestinationWnd
	}
	return 0
}

// 重命名文件夹事件
type EventRenameFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcFolder string `protobuf:"bytes,1,opt,name=srcFolder,proto3" json:"srcFolder,omitempty"` // 来源文件夹路径
	DesFolder string `protobuf:"bytes,2,opt,name=desFolder,proto3" json:"desFolder,omitempty"` // 目标文件夹路径
}

func (x *EventRenameFolder) Reset() {
	*x = EventRenameFolder{}
	mi := &file_event_detail_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRenameFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRenameFolder) ProtoMessage() {}

func (x *EventRenameFolder) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRenameFolder.ProtoReflect.Descriptor instead.
func (*EventRenameFolder) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{33}
}

func (x *EventRenameFolder) GetSrcFolder() string {
	if x != nil {
		return x.SrcFolder
	}
	return ""
}

func (x *EventRenameFolder) GetDesFolder() string {
	if x != nil {
		return x.DesFolder
	}
	return ""
}

// 新增：移动文件夹事件
type EventMoveFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcFolder string `protobuf:"bytes,1,opt,name=srcFolder,proto3" json:"srcFolder,omitempty"` // 来源文件夹路径
	DesFolder string `protobuf:"bytes,2,opt,name=desFolder,proto3" json:"desFolder,omitempty"` // 目标文件夹路径
}

func (x *EventMoveFolder) Reset() {
	*x = EventMoveFolder{}
	mi := &file_event_detail_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMoveFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMoveFolder) ProtoMessage() {}

func (x *EventMoveFolder) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMoveFolder.ProtoReflect.Descriptor instead.
func (*EventMoveFolder) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{34}
}

func (x *EventMoveFolder) GetSrcFolder() string {
	if x != nil {
		return x.SrcFolder
	}
	return ""
}

func (x *EventMoveFolder) GetDesFolder() string {
	if x != nil {
		return x.DesFolder
	}
	return ""
}

// 新增：彻底删除文件夹事件
type EventDeleteFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcFolder string `protobuf:"bytes,1,opt,name=srcFolder,proto3" json:"srcFolder,omitempty"` // 来源文件夹路径
}

func (x *EventDeleteFolder) Reset() {
	*x = EventDeleteFolder{}
	mi := &file_event_detail_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventDeleteFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDeleteFolder) ProtoMessage() {}

func (x *EventDeleteFolder) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDeleteFolder.ProtoReflect.Descriptor instead.
func (*EventDeleteFolder) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{35}
}

func (x *EventDeleteFolder) GetSrcFolder() string {
	if x != nil {
		return x.SrcFolder
	}
	return ""
}

// 新增：把文件夹移到回收站事件
type EventRecycleFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcFolder string `protobuf:"bytes,1,opt,name=srcFolder,proto3" json:"srcFolder,omitempty"` // 来源文件夹路径
	DesFolder string `protobuf:"bytes,2,opt,name=desFolder,proto3" json:"desFolder,omitempty"` // 目标文件夹路径
}

func (x *EventRecycleFolder) Reset() {
	*x = EventRecycleFolder{}
	mi := &file_event_detail_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRecycleFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRecycleFolder) ProtoMessage() {}

func (x *EventRecycleFolder) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRecycleFolder.ProtoReflect.Descriptor instead.
func (*EventRecycleFolder) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{36}
}

func (x *EventRecycleFolder) GetSrcFolder() string {
	if x != nil {
		return x.SrcFolder
	}
	return ""
}

func (x *EventRecycleFolder) GetDesFolder() string {
	if x != nil {
		return x.DesFolder
	}
	return ""
}

// 新增：从回收站还原文件夹事件
type EventRestoreFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcFolder string `protobuf:"bytes,1,opt,name=srcFolder,proto3" json:"srcFolder,omitempty"` // 来源文件夹路径
	DesFolder string `protobuf:"bytes,2,opt,name=desFolder,proto3" json:"desFolder,omitempty"` // 目标文件夹路径
}

func (x *EventRestoreFolder) Reset() {
	*x = EventRestoreFolder{}
	mi := &file_event_detail_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRestoreFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRestoreFolder) ProtoMessage() {}

func (x *EventRestoreFolder) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRestoreFolder.ProtoReflect.Descriptor instead.
func (*EventRestoreFolder) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{37}
}

func (x *EventRestoreFolder) GetSrcFolder() string {
	if x != nil {
		return x.SrcFolder
	}
	return ""
}

func (x *EventRestoreFolder) GetDesFolder() string {
	if x != nil {
		return x.DesFolder
	}
	return ""
}

// 修改注册表事件
type EventChangeRegistryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegKeyPath   string `protobuf:"bytes,1,opt,name=regKeyPath,proto3" json:"regKeyPath,omitempty"`     // 被修改的注册表键路径
	RegValueName string `protobuf:"bytes,2,opt,name=regValueName,proto3" json:"regValueName,omitempty"` // 被修改的注册表值名称
}

func (x *EventChangeRegistryValue) Reset() {
	*x = EventChangeRegistryValue{}
	mi := &file_event_detail_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventChangeRegistryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChangeRegistryValue) ProtoMessage() {}

func (x *EventChangeRegistryValue) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChangeRegistryValue.ProtoReflect.Descriptor instead.
func (*EventChangeRegistryValue) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{38}
}

func (x *EventChangeRegistryValue) GetRegKeyPath() string {
	if x != nil {
		return x.RegKeyPath
	}
	return ""
}

func (x *EventChangeRegistryValue) GetRegValueName() string {
	if x != nil {
		return x.RegValueName
	}
	return ""
}

// 打印事件
type EventPrint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile string `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 要被打印的文件
}

func (x *EventPrint) Reset() {
	*x = EventPrint{}
	mi := &file_event_detail_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventPrint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPrint) ProtoMessage() {}

func (x *EventPrint) ProtoReflect() protoreflect.Message {
	mi := &file_event_detail_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPrint.ProtoReflect.Descriptor instead.
func (*EventPrint) Descriptor() ([]byte, []int) {
	return file_event_detail_proto_rawDescGZIP(), []int{39}
}

func (x *EventPrint) GetDestinationFile() string {
	if x != nil {
		return x.DestinationFile
	}
	return ""
}

var File_event_detail_proto protoreflect.FileDescriptor

var file_event_detail_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xeb, 0x03, 0x0a, 0x0b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x61, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x68, 0x61, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0xeb, 0x02, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a,
	0x0d, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0xc7, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x22, 0x57, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x41, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x44, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x5d, 0x0a,
	0x07, 0x5a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x06,
	0x5a, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x5a, 0x69, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x08, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5a, 0x69, 0x70, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x5a, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x5a, 0x69, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x7a, 0x69, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61,
	0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x5a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x5a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0x35, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x77, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x22, 0x58, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x58, 0x0a, 0x0c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x5d,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x9d, 0x02,
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x8b, 0x02,
	0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x61, 0x0a, 0x15, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x8e,
	0x02, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x74, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x12, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x63,
	0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4e, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22,
	0x35, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x34, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x58, 0x0a, 0x0e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x0e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x77, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x68, 0x77, 0x6e, 0x64, 0x22, 0x66, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x77, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x77, 0x6e, 0x64,
	0x22, 0x47, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x22, 0x6e, 0x0a, 0x10, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f,
	0x63, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6e, 0x64, 0x22, 0x86, 0x01,
	0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x6e, 0x64, 0x22, 0x58, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x22, 0x38, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6e, 0x64, 0x22, 0x4f, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72,
	0x63, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72,
	0x63, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x72, 0x63, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x72, 0x63, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x12, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x18, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x0a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x19, 0x5a, 0x17, 0x2e, 0x2f, 0x64, 0x6f, 0x63, 0x6d, 0x61, 0x70, 0x2f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_detail_proto_rawDescOnce sync.Once
	file_event_detail_proto_rawDescData = file_event_detail_proto_rawDesc
)

func file_event_detail_proto_rawDescGZIP() []byte {
	file_event_detail_proto_rawDescOnce.Do(func() {
		file_event_detail_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_detail_proto_rawDescData)
	})
	return file_event_detail_proto_rawDescData
}

var file_event_detail_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_event_detail_proto_goTypes = []any{
	(*EventDelete)(nil),              // 0: docmap.exchange.model.EventDelete
	(*EventCopy)(nil),                // 1: docmap.exchange.model.EventCopy
	(*EventMove)(nil),                // 2: docmap.exchange.model.EventMove
	(*EventSaveAs)(nil),              // 3: docmap.exchange.model.EventSaveAs
	(*EventCDBurn)(nil),              // 4: docmap.exchange.model.EventCDBurn
	(*EventCreate)(nil),              // 5: docmap.exchange.model.EventCreate
	(*ZipFile)(nil),                  // 6: docmap.exchange.model.ZipFile
	(*ZipMap)(nil),                   // 7: docmap.exchange.model.ZipMap
	(*EventZip)(nil),                 // 8: docmap.exchange.model.EventZip
	(*EventUnzip)(nil),               // 9: docmap.exchange.model.EventUnzip
	(*EventEdit)(nil),                // 10: docmap.exchange.model.EventEdit
	(*EventRename)(nil),              // 11: docmap.exchange.model.EventRename
	(*EventRecycle)(nil),             // 12: docmap.exchange.model.EventRecycle
	(*EventRestore)(nil),             // 13: docmap.exchange.model.EventRestore
	(*NetFileInfo)(nil),              // 14: docmap.exchange.model.NetFileInfo
	(*ServerAddress)(nil),            // 15: docmap.exchange.model.ServerAddress
	(*EventUpload)(nil),              // 16: docmap.exchange.model.EventUpload
	(*EventDownload)(nil),            // 17: docmap.exchange.model.EventDownload
	(*EventChangeAttributes)(nil),    // 18: docmap.exchange.model.EventChangeAttributes
	(*EventFtpSend)(nil),             // 19: docmap.exchange.model.EventFtpSend
	(*EventKill)(nil),                // 20: docmap.exchange.model.EventKill
	(*EventRun)(nil),                 // 21: docmap.exchange.model.EventRun
	(*EventBeginEdit)(nil),           // 22: docmap.exchange.model.EventBeginEdit
	(*EventEndEdit)(nil),             // 23: docmap.exchange.model.EventEndEdit
	(*EventBeginRead)(nil),           // 24: docmap.exchange.model.EventBeginRead
	(*EventEndRead)(nil),             // 25: docmap.exchange.model.EventEndRead
	(*Content)(nil),                  // 26: docmap.exchange.model.Content
	(*EventCopyContent)(nil),         // 27: docmap.exchange.model.EventCopyContent
	(*EventPasteContent)(nil),        // 28: docmap.exchange.model.EventPasteContent
	(*EventPasteContent_)(nil),       // 29: docmap.exchange.model.EventPasteContent_
	(*EventEncrypt)(nil),             // 30: docmap.exchange.model.EventEncrypt
	(*EventDecrypt)(nil),             // 31: docmap.exchange.model.EventDecrypt
	(*EventInsertFile)(nil),          // 32: docmap.exchange.model.EventInsertFile
	(*EventRenameFolder)(nil),        // 33: docmap.exchange.model.EventRenameFolder
	(*EventMoveFolder)(nil),          // 34: docmap.exchange.model.EventMoveFolder
	(*EventDeleteFolder)(nil),        // 35: docmap.exchange.model.EventDeleteFolder
	(*EventRecycleFolder)(nil),       // 36: docmap.exchange.model.EventRecycleFolder
	(*EventRestoreFolder)(nil),       // 37: docmap.exchange.model.EventRestoreFolder
	(*EventChangeRegistryValue)(nil), // 38: docmap.exchange.model.EventChangeRegistryValue
	(*EventPrint)(nil),               // 39: docmap.exchange.model.EventPrint
}
var file_event_detail_proto_depIdxs = []int32{
	0,  // 0: docmap.exchange.model.EventCopy.sourceFileInfo:type_name -> docmap.exchange.model.EventDelete
	0,  // 1: docmap.exchange.model.EventCopy.overwriteFile:type_name -> docmap.exchange.model.EventDelete
	0,  // 2: docmap.exchange.model.EventMove.sourceFileInfo:type_name -> docmap.exchange.model.EventDelete
	0,  // 3: docmap.exchange.model.EventMove.overwriteFile:type_name -> docmap.exchange.model.EventDelete
	0,  // 4: docmap.exchange.model.EventCDBurn.sourceFileInfo:type_name -> docmap.exchange.model.EventDelete
	0,  // 5: docmap.exchange.model.ZipFile.fileinfo:type_name -> docmap.exchange.model.EventDelete
	6,  // 6: docmap.exchange.model.ZipMap.src:type_name -> docmap.exchange.model.ZipFile
	7,  // 7: docmap.exchange.model.EventZip.sourceFiles:type_name -> docmap.exchange.model.ZipMap
	6,  // 8: docmap.exchange.model.EventZip.destinationFiles:type_name -> docmap.exchange.model.ZipFile
	6,  // 9: docmap.exchange.model.EventUnzip.sourceFiles:type_name -> docmap.exchange.model.ZipFile
	6,  // 10: docmap.exchange.model.EventUnzip.destinationFiles:type_name -> docmap.exchange.model.ZipFile
	15, // 11: docmap.exchange.model.EventUpload.destinationServers:type_name -> docmap.exchange.model.ServerAddress
	14, // 12: docmap.exchange.model.EventUpload.destinationNetFile:type_name -> docmap.exchange.model.NetFileInfo
	15, // 13: docmap.exchange.model.EventDownload.sourceServers:type_name -> docmap.exchange.model.ServerAddress
	14, // 14: docmap.exchange.model.EventDownload.sourceNetFile:type_name -> docmap.exchange.model.NetFileInfo
	15, // 15: docmap.exchange.model.EventFtpSend.destinationServers:type_name -> docmap.exchange.model.ServerAddress
	14, // 16: docmap.exchange.model.EventFtpSend.destinationFile:type_name -> docmap.exchange.model.NetFileInfo
	26, // 17: docmap.exchange.model.EventCopyContent.contents:type_name -> docmap.exchange.model.Content
	26, // 18: docmap.exchange.model.EventPasteContent.contents:type_name -> docmap.exchange.model.Content
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_event_detail_proto_init() }
func file_event_detail_proto_init() {
	if File_event_detail_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_detail_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_detail_proto_goTypes,
		DependencyIndexes: file_event_detail_proto_depIdxs,
		MessageInfos:      file_event_detail_proto_msgTypes,
	}.Build()
	File_event_detail_proto = out.File
	file_event_detail_proto_rawDesc = nil
	file_event_detail_proto_goTypes = nil
	file_event_detail_proto_depIdxs = nil
}
