// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0--rc3
// source: Event.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileUrl *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=fileUrl,proto3" json:"fileUrl,omitempty"` // 文件网址
}

func (x *NetFileInfo) Reset() {
	*x = NetFileInfo{}
	mi := &file_Event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetFileInfo) ProtoMessage() {}

func (x *NetFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetFileInfo.ProtoReflect.Descriptor instead.
func (*NetFileInfo) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{0}
}

func (x *NetFileInfo) GetFileUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.FileUrl
	}
	return nil
}

// 上传文件
type Upload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol           *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`                     // 网络传输协议
	SourceFile         *FileInfo               `protobuf:"bytes,2,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`                 // 要上传的本地文件信息
	DestinationServers []*ServerAddress        `protobuf:"bytes,3,rep,name=destinationServers,proto3" json:"destinationServers,omitempty"` // 目标服务器地址信息
	DestinationFile    *FileInfo               `protobuf:"bytes,4,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`       // 上传后远程保存文件的信息
}

func (x *Upload) Reset() {
	*x = Upload{}
	mi := &file_Event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upload) ProtoMessage() {}

func (x *Upload) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upload.ProtoReflect.Descriptor instead.
func (*Upload) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{1}
}

func (x *Upload) GetProtocol() *wrapperspb.StringValue {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Upload) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *Upload) GetDestinationServers() []*ServerAddress {
	if x != nil {
		return x.DestinationServers
	}
	return nil
}

func (x *Upload) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

// 下载文件
type Download struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`               // 网络传输协议，如ftp, http
	SourceServers   []*ServerAddress        `protobuf:"bytes,2,rep,name=sourceServers,proto3" json:"sourceServers,omitempty"`     // 来源服务器地址信息
	SourceFile      *FileInfo               `protobuf:"bytes,3,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 来源文件的信息
	DestinationFile *FileInfo               `protobuf:"bytes,4,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 下载保存文件的信息
}

func (x *Download) Reset() {
	*x = Download{}
	mi := &file_Event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Download) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Download) ProtoMessage() {}

func (x *Download) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Download.ProtoReflect.Descriptor instead.
func (*Download) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{2}
}

func (x *Download) GetProtocol() *wrapperspb.StringValue {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Download) GetSourceServers() []*ServerAddress {
	if x != nil {
		return x.SourceServers
	}
	return nil
}

func (x *Download) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *Download) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

// 访问应用
type Access struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`           // 网络传输协议，如ftp, http
	SourceServers []*ServerAddress        `protobuf:"bytes,2,rep,name=sourceServers,proto3" json:"sourceServers,omitempty"` // 来源服务器地址信息
	Url           *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                     // 内容地址
}

func (x *Access) Reset() {
	*x = Access{}
	mi := &file_Event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Access) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Access) ProtoMessage() {}

func (x *Access) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Access.ProtoReflect.Descriptor instead.
func (*Access) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{3}
}

func (x *Access) GetProtocol() *wrapperspb.StringValue {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Access) GetSourceServers() []*ServerAddress {
	if x != nil {
		return x.SourceServers
	}
	return nil
}

func (x *Access) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

type FileInZipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityIdentity *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=entityIdentity,proto3" json:"entityIdentity,omitempty"` // 文件识别ID（根据客户端实现方式的不同，可能和压缩来源文件的fileId相同，也可能新建一个不同的值）
	ZipPath        *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=zipPath,proto3" json:"zipPath,omitempty"`               // 在zip文件中的路径
	Size           *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`                     // 如果写入了新的fileID，写入后的文件大小
	Sha1           *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=sha1,proto3" json:"sha1,omitempty"`                     // 如果写入了新的fileId，写入后的文件sha1值
	InZipTime      *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=inZipTime,proto3" json:"inZipTime,omitempty"`           // 写入zip文件的事件，Unix时间戳，毫秒
	Encrypted      *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=encrypted,proto3" json:"encrypted,omitempty"`           // 是否被客户端加密过(0:未加密;1:已加密)
}

func (x *FileInZipInfo) Reset() {
	*x = FileInZipInfo{}
	mi := &file_Event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInZipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInZipInfo) ProtoMessage() {}

func (x *FileInZipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInZipInfo.ProtoReflect.Descriptor instead.
func (*FileInZipInfo) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{4}
}

func (x *FileInZipInfo) GetEntityIdentity() *wrapperspb.StringValue {
	if x != nil {
		return x.EntityIdentity
	}
	return nil
}

func (x *FileInZipInfo) GetZipPath() *wrapperspb.StringValue {
	if x != nil {
		return x.ZipPath
	}
	return nil
}

func (x *FileInZipInfo) GetSize() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *FileInZipInfo) GetSha1() *wrapperspb.StringValue {
	if x != nil {
		return x.Sha1
	}
	return nil
}

func (x *FileInZipInfo) GetInZipTime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.InZipTime
	}
	return nil
}

func (x *FileInZipInfo) GetEncrypted() *wrapperspb.Int32Value {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

type FileZipMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src *FileInfo      `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"` // 未压缩之前来源文件的文件信息
	Des *FileInZipInfo `protobuf:"bytes,2,opt,name=des,proto3" json:"des,omitempty"` // 被压缩到zip文件中之后的文件信息
}

func (x *FileZipMap) Reset() {
	*x = FileZipMap{}
	mi := &file_Event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileZipMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileZipMap) ProtoMessage() {}

func (x *FileZipMap) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileZipMap.ProtoReflect.Descriptor instead.
func (*FileZipMap) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{5}
}

func (x *FileZipMap) GetSrc() *FileInfo {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *FileZipMap) GetDes() *FileInZipInfo {
	if x != nil {
		return x.Des
	}
	return nil
}

// 压缩为zip文件
type Zip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFiles      []*FileZipMap `protobuf:"bytes,1,rep,name=sourceFiles,proto3" json:"sourceFiles,omitempty"`           // 被压缩的文件列表
	DestinationFiles []*FileInfo   `protobuf:"bytes,2,rep,name=destinationFiles,proto3" json:"destinationFiles,omitempty"` // 压缩的目标zip文件(可能会被压缩软件拆分成多个文件)
}

func (x *Zip) Reset() {
	*x = Zip{}
	mi := &file_Event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Zip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zip) ProtoMessage() {}

func (x *Zip) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zip.ProtoReflect.Descriptor instead.
func (*Zip) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{6}
}

func (x *Zip) GetSourceFiles() []*FileZipMap {
	if x != nil {
		return x.SourceFiles
	}
	return nil
}

func (x *Zip) GetDestinationFiles() []*FileInfo {
	if x != nil {
		return x.DestinationFiles
	}
	return nil
}

type FileUnzipMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src *FileInZipInfo `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"` // 被压缩到zip文件中的文件信息
	Des *FileInfo      `protobuf:"bytes,2,opt,name=des,proto3" json:"des,omitempty"` // 解压后的文件信息
}

func (x *FileUnzipMap) Reset() {
	*x = FileUnzipMap{}
	mi := &file_Event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUnzipMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUnzipMap) ProtoMessage() {}

func (x *FileUnzipMap) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUnzipMap.ProtoReflect.Descriptor instead.
func (*FileUnzipMap) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{7}
}

func (x *FileUnzipMap) GetSrc() *FileInZipInfo {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *FileUnzipMap) GetDes() *FileInfo {
	if x != nil {
		return x.Des
	}
	return nil
}

// 解压缩zip文件
type Unzip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFiles      []*FileInfo     `protobuf:"bytes,1,rep,name=sourceFiles,proto3" json:"sourceFiles,omitempty"`           // 要解压的zip文件
	DestinationFiles []*FileUnzipMap `protobuf:"bytes,2,rep,name=destinationFiles,proto3" json:"destinationFiles,omitempty"` // 解压后的文件列表
}

func (x *Unzip) Reset() {
	*x = Unzip{}
	mi := &file_Event_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Unzip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unzip) ProtoMessage() {}

func (x *Unzip) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unzip.ProtoReflect.Descriptor instead.
func (*Unzip) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{8}
}

func (x *Unzip) GetSourceFiles() []*FileInfo {
	if x != nil {
		return x.SourceFiles
	}
	return nil
}

func (x *Unzip) GetDestinationFiles() []*FileUnzipMap {
	if x != nil {
		return x.DestinationFiles
	}
	return nil
}

// 粘贴复制内容
type CopyPast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      *FileInfo `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 来源文件
	DestinationFile *FileInfo `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 目标文件
	OverwriteFile   *FileInfo `protobuf:"bytes,3,opt,name=overwriteFile,proto3" json:"overwriteFile,omitempty"`     // 覆盖文件
}

func (x *CopyPast) Reset() {
	*x = CopyPast{}
	mi := &file_Event_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyPast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyPast) ProtoMessage() {}

func (x *CopyPast) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyPast.ProtoReflect.Descriptor instead.
func (*CopyPast) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{9}
}

func (x *CopyPast) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *CopyPast) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

func (x *CopyPast) GetOverwriteFile() *FileInfo {
	if x != nil {
		return x.OverwriteFile
	}
	return nil
}

// 创建文件
type Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile *FileInfo `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 保存文件的信息
}

func (x *Create) Reset() {
	*x = Create{}
	mi := &file_Event_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Create) ProtoMessage() {}

func (x *Create) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Create.ProtoReflect.Descriptor instead.
func (*Create) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{10}
}

func (x *Create) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

// 插入对象
type InsertObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      *FileInfo   `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 来源文件
	DestinationFile *FileInfo   `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 保存文件的信息
	InsertedFiles   []*FileInfo `protobuf:"bytes,3,rep,name=insertedFiles,proto3" json:"insertedFiles,omitempty"`     // 被插入的列表
}

func (x *InsertObject) Reset() {
	*x = InsertObject{}
	mi := &file_Event_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertObject) ProtoMessage() {}

func (x *InsertObject) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertObject.ProtoReflect.Descriptor instead.
func (*InsertObject) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{11}
}

func (x *InsertObject) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *InsertObject) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

func (x *InsertObject) GetInsertedFiles() []*FileInfo {
	if x != nil {
		return x.InsertedFiles
	}
	return nil
}

// 删除文件
type Delete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile *FileInfo `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"` // 要被删除文件的信息
}

func (x *Delete) Reset() {
	*x = Delete{}
	mi := &file_Event_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delete) ProtoMessage() {}

func (x *Delete) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delete.ProtoReflect.Descriptor instead.
func (*Delete) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{12}
}

func (x *Delete) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

// 刻盘
type CDBurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      *FileInfo `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 来源文件
	DestinationFile *FileInfo `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 保存文件
}

func (x *CDBurn) Reset() {
	*x = CDBurn{}
	mi := &file_Event_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDBurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDBurn) ProtoMessage() {}

func (x *CDBurn) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDBurn.ProtoReflect.Descriptor instead.
func (*CDBurn) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{13}
}

func (x *CDBurn) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *CDBurn) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

// 改变文件属性
type ChangeAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile *FileInfo               `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 要改变属性的文件信息
	Attributes      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`           // 要改变为的属性值
}

func (x *ChangeAttributes) Reset() {
	*x = ChangeAttributes{}
	mi := &file_Event_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAttributes) ProtoMessage() {}

func (x *ChangeAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAttributes.ProtoReflect.Descriptor instead.
func (*ChangeAttributes) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{14}
}

func (x *ChangeAttributes) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

func (x *ChangeAttributes) GetAttributes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// FTP上传
type FtpSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile               *FileInfo               `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`                             // 要上传的本地文件信息
	DestinationServers       []*ServerAddress        `protobuf:"bytes,2,rep,name=destinationServers,proto3" json:"destinationServers,omitempty"`             // 目标服务器地址信息
	DestinationFile          *NetFileInfo            `protobuf:"bytes,3,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"`                   // 上传后远程保存文件的信息
	DestinationFileTagFileId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=destinationFileTagFileId,proto3" json:"destinationFileTagFileId,omitempty"` // 上传文件的TagFileID
}

func (x *FtpSend) Reset() {
	*x = FtpSend{}
	mi := &file_Event_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FtpSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpSend) ProtoMessage() {}

func (x *FtpSend) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpSend.ProtoReflect.Descriptor instead.
func (*FtpSend) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{15}
}

func (x *FtpSend) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *FtpSend) GetDestinationServers() []*ServerAddress {
	if x != nil {
		return x.DestinationServers
	}
	return nil
}

func (x *FtpSend) GetDestinationFile() *NetFileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

func (x *FtpSend) GetDestinationFileTagFileId() *wrapperspb.StringValue {
	if x != nil {
		return x.DestinationFileTagFileId
	}
	return nil
}

// 终止程序运行
type Kill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile *FileInfo `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 要终止运行的程序信息
}

func (x *Kill) Reset() {
	*x = Kill{}
	mi := &file_Event_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kill) ProtoMessage() {}

func (x *Kill) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kill.ProtoReflect.Descriptor instead.
func (*Kill) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{16}
}

func (x *Kill) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

// 启动程序
type Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile *FileInfo `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 要运行的程序信息
}

func (x *Run) Reset() {
	*x = Run{}
	mi := &file_Event_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{17}
}

func (x *Run) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

// 开始编辑
type BeginEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      *FileInfo               `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 被编辑前的文件
	DestinationFile *FileInfo               `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 被编辑后的文件
	BeginTime       *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=beginTime,proto3" json:"beginTime,omitempty"`             // 文件第一次被编辑的时间，Unix时间戳，毫秒
}

func (x *BeginEdit) Reset() {
	*x = BeginEdit{}
	mi := &file_Event_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginEdit) ProtoMessage() {}

func (x *BeginEdit) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginEdit.ProtoReflect.Descriptor instead.
func (*BeginEdit) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{18}
}

func (x *BeginEdit) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *BeginEdit) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

func (x *BeginEdit) GetBeginTime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.BeginTime
	}
	return nil
}

// 结束编辑
type EndEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      *FileInfo               `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 被编辑前的文件
	DestinationFile *FileInfo               `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 被编辑后的文件路径
	EndTime         *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`                 // 文件关闭前最后一次被编辑的时间，Unix时间戳，毫秒
}

func (x *EndEdit) Reset() {
	*x = EndEdit{}
	mi := &file_Event_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndEdit) ProtoMessage() {}

func (x *EndEdit) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndEdit.ProtoReflect.Descriptor instead.
func (*EndEdit) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{19}
}

func (x *EndEdit) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *EndEdit) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

func (x *EndEdit) GetEndTime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// 开始阅读
type BeginRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      *FileInfo               `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 被阅读前的文件
	DestinationFile *FileInfo               `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 被阅读后的文件路径
	BeginTime       *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=beginTime,proto3" json:"beginTime,omitempty"`             // 文件第一次被打开的时间，Unix时间戳，毫秒
}

func (x *BeginRead) Reset() {
	*x = BeginRead{}
	mi := &file_Event_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginRead) ProtoMessage() {}

func (x *BeginRead) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginRead.ProtoReflect.Descriptor instead.
func (*BeginRead) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{20}
}

func (x *BeginRead) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *BeginRead) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

func (x *BeginRead) GetBeginTime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.BeginTime
	}
	return nil
}

// 结束阅读
type EndRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      *FileInfo               `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 被阅读前的文件
	DestinationFile *FileInfo               `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 被阅读后的文件路径
	EndTime         *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`                 // 文件最后关闭的时间，Unix时间戳，毫秒
}

func (x *EndRead) Reset() {
	*x = EndRead{}
	mi := &file_Event_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndRead) ProtoMessage() {}

func (x *EndRead) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndRead.ProtoReflect.Descriptor instead.
func (*EndRead) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{21}
}

func (x *EndRead) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *EndRead) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

func (x *EndRead) GetEndTime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// 文件TAG项
type FileTagEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     // 键
	Value *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // 值
	Time  *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`   // 文件创建时间，Unix时间戳，毫秒
}

func (x *FileTagEntry) Reset() {
	*x = FileTagEntry{}
	mi := &file_Event_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTagEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTagEntry) ProtoMessage() {}

func (x *FileTagEntry) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTagEntry.ProtoReflect.Descriptor instead.
func (*FileTagEntry) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{22}
}

func (x *FileTagEntry) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *FileTagEntry) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FileTagEntry) GetTime() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Time
	}
	return nil
}

// 写TAG
type WriteTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile      *FileInfo               `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"`           // 被写TAG的文件
	DestinationFile *FileInfo               `protobuf:"bytes,2,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 被写TAG的文件
	BeforeFileTags  []*FileTagEntry         `protobuf:"bytes,3,rep,name=beforeFileTags,proto3" json:"beforeFileTags,omitempty"`   // 写TAG前文件原本的TAG集合
	AfterFileTags   []*FileTagEntry         `protobuf:"bytes,4,rep,name=afterFileTags,proto3" json:"afterFileTags,omitempty"`     // 写TAG后文件新的TAG集合
	From            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`                       // 写TAG的发起方('client'：客户；'server'：服务器)
}

func (x *WriteTag) Reset() {
	*x = WriteTag{}
	mi := &file_Event_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteTag) ProtoMessage() {}

func (x *WriteTag) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteTag.ProtoReflect.Descriptor instead.
func (*WriteTag) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{23}
}

func (x *WriteTag) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *WriteTag) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

func (x *WriteTag) GetBeforeFileTags() []*FileTagEntry {
	if x != nil {
		return x.BeforeFileTags
	}
	return nil
}

func (x *WriteTag) GetAfterFileTags() []*FileTagEntry {
	if x != nil {
		return x.AfterFileTags
	}
	return nil
}

func (x *WriteTag) GetFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.From
	}
	return nil
}

// 私有事件
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"` // 内容格式代码
	Size   *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`     // 内容大小（字节计）
	Md5    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=md5,proto3" json:"md5,omitempty"`       // 内容的md5编码值
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_Event_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{24}
}

func (x *Content) GetFormat() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *Content) GetSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Content) GetMd5() *wrapperspb.StringValue {
	if x != nil {
		return x.Md5
	}
	return nil
}

type CopyContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile *FileInfo  `protobuf:"bytes,1,opt,name=sourceFile,proto3" json:"sourceFile,omitempty"` // 复制来源路径
	Contents   []*Content `protobuf:"bytes,2,rep,name=contents,proto3" json:"contents,omitempty"`     // 复制内容清单
}

func (x *CopyContent) Reset() {
	*x = CopyContent{}
	mi := &file_Event_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyContent) ProtoMessage() {}

func (x *CopyContent) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyContent.ProtoReflect.Descriptor instead.
func (*CopyContent) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{25}
}

func (x *CopyContent) GetSourceFile() *FileInfo {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *CopyContent) GetContents() []*Content {
	if x != nil {
		return x.Contents
	}
	return nil
}

type PasteContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile *FileInfo  `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 粘贴目标路径
	Contents        []*Content `protobuf:"bytes,2,rep,name=contents,proto3" json:"contents,omitempty"`               // 粘贴内容清单
}

func (x *PasteContent) Reset() {
	*x = PasteContent{}
	mi := &file_Event_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasteContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasteContent) ProtoMessage() {}

func (x *PasteContent) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasteContent.ProtoReflect.Descriptor instead.
func (*PasteContent) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{26}
}

func (x *PasteContent) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

func (x *PasteContent) GetContents() []*Content {
	if x != nil {
		return x.Contents
	}
	return nil
}

type RenameFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcFolder *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=srcFolder,proto3" json:"srcFolder,omitempty"` // 来源文件夹路径
	DesFolder *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=desFolder,proto3" json:"desFolder,omitempty"` // 目标文件夹路径
}

func (x *RenameFolder) Reset() {
	*x = RenameFolder{}
	mi := &file_Event_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFolder) ProtoMessage() {}

func (x *RenameFolder) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFolder.ProtoReflect.Descriptor instead.
func (*RenameFolder) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{27}
}

func (x *RenameFolder) GetSrcFolder() *wrapperspb.StringValue {
	if x != nil {
		return x.SrcFolder
	}
	return nil
}

func (x *RenameFolder) GetDesFolder() *wrapperspb.StringValue {
	if x != nil {
		return x.DesFolder
	}
	return nil
}

type ChangeRegistryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyPath *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=keyPath,proto3" json:"keyPath,omitempty"` // 要修改的注册表键路径
	ValName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=valName,proto3" json:"valName,omitempty"` // 要修改的注册表值名
}

func (x *ChangeRegistryValue) Reset() {
	*x = ChangeRegistryValue{}
	mi := &file_Event_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeRegistryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeRegistryValue) ProtoMessage() {}

func (x *ChangeRegistryValue) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeRegistryValue.ProtoReflect.Descriptor instead.
func (*ChangeRegistryValue) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{28}
}

func (x *ChangeRegistryValue) GetKeyPath() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyPath
	}
	return nil
}

func (x *ChangeRegistryValue) GetValName() *wrapperspb.StringValue {
	if x != nil {
		return x.ValName
	}
	return nil
}

type PolicyAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // 策略属性名
	Value *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // 策略属性值
}

func (x *PolicyAttribute) Reset() {
	*x = PolicyAttribute{}
	mi := &file_Event_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyAttribute) ProtoMessage() {}

func (x *PolicyAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyAttribute.ProtoReflect.Descriptor instead.
func (*PolicyAttribute) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{29}
}

func (x *PolicyAttribute) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PolicyAttribute) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type PermissionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=eventName,proto3" json:"eventName,omitempty"`                 // 触发策略保护的事件名
	PolicyId          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=policyId,proto3" json:"policyId,omitempty"`                   // 触发策略保护的策略标识符
	PolicyDescription *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=policyDescription,proto3" json:"policyDescription,omitempty"` // 触发策略保护的策略描述信息
	EventAttributes   []*PolicyAttribute      `protobuf:"bytes,4,rep,name=eventAttributes,proto3" json:"eventAttributes,omitempty"`     // 触发策略保护的事件属性集合
}

func (x *PermissionEvent) Reset() {
	*x = PermissionEvent{}
	mi := &file_Event_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionEvent) ProtoMessage() {}

func (x *PermissionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionEvent.ProtoReflect.Descriptor instead.
func (*PermissionEvent) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{30}
}

func (x *PermissionEvent) GetEventName() *wrapperspb.StringValue {
	if x != nil {
		return x.EventName
	}
	return nil
}

func (x *PermissionEvent) GetPolicyId() *wrapperspb.StringValue {
	if x != nil {
		return x.PolicyId
	}
	return nil
}

func (x *PermissionEvent) GetPolicyDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.PolicyDescription
	}
	return nil
}

func (x *PermissionEvent) GetEventAttributes() []*PolicyAttribute {
	if x != nil {
		return x.EventAttributes
	}
	return nil
}

type Print struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationFile *FileInfo `protobuf:"bytes,1,opt,name=destinationFile,proto3" json:"destinationFile,omitempty"` // 打印的文档路径
}

func (x *Print) Reset() {
	*x = Print{}
	mi := &file_Event_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Print) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Print) ProtoMessage() {}

func (x *Print) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Print.ProtoReflect.Descriptor instead.
func (*Print) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{31}
}

func (x *Print) GetDestinationFile() *FileInfo {
	if x != nil {
		return x.DestinationFile
	}
	return nil
}

// 事件
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Upload          *Upload              `protobuf:"bytes,1,opt,name=upload,proto3,oneof" json:"upload,omitempty"`                    // 上传
	Download        *Download            `protobuf:"bytes,2,opt,name=download,proto3,oneof" json:"download,omitempty"`                // 下载
	Access          *Access              `protobuf:"bytes,3,opt,name=access,proto3,oneof" json:"access,omitempty"`                    // 访问
	Zip             *Zip                 `protobuf:"bytes,4,opt,name=zip,proto3,oneof" json:"zip,omitempty"`                          // zip压缩
	Unzip           *Unzip               `protobuf:"bytes,5,opt,name=unzip,proto3,oneof" json:"unzip,omitempty"`                      // zip解压缩
	PastContent     *CopyPast            `protobuf:"bytes,6,opt,name=pastContent,proto3,oneof" json:"pastContent,omitempty"`          // 粘贴文件
	Copy            *CopyPast            `protobuf:"bytes,7,opt,name=copy,proto3,oneof" json:"copy,omitempty"`                        // 复制文件
	SaveAs          *CopyPast            `protobuf:"bytes,8,opt,name=saveAs,proto3,oneof" json:"saveAs,omitempty"`                    // 另存文件
	Rename          *CopyPast            `protobuf:"bytes,9,opt,name=rename,proto3,oneof" json:"rename,omitempty"`                    // 重命名文件
	Edit            *CopyPast            `protobuf:"bytes,10,opt,name=edit,proto3,oneof" json:"edit,omitempty"`                       // 编辑文件
	Create          *Create              `protobuf:"bytes,11,opt,name=create,proto3,oneof" json:"create,omitempty"`                   // 创建文件
	InsertObject    *InsertObject        `protobuf:"bytes,12,opt,name=insertObject,proto3,oneof" json:"insertObject,omitempty"`       // 插入对象
	InsertFile      *InsertObject        `protobuf:"bytes,13,opt,name=insertFile,proto3,oneof" json:"insertFile,omitempty"`           // 插入文件
	Move            *CopyPast            `protobuf:"bytes,14,opt,name=move,proto3,oneof" json:"move,omitempty"`                       // 移动文件
	Delete          *Delete              `protobuf:"bytes,15,opt,name=delete,proto3,oneof" json:"delete,omitempty"`                   // 删除文件
	Encrypt         *CopyPast            `protobuf:"bytes,16,opt,name=encrypt,proto3,oneof" json:"encrypt,omitempty"`                 // 加密文件
	Decrypt         *CopyPast            `protobuf:"bytes,17,opt,name=decrypt,proto3,oneof" json:"decrypt,omitempty"`                 // 解密文件
	Recycle         *CopyPast            `protobuf:"bytes,18,opt,name=recycle,proto3,oneof" json:"recycle,omitempty"`                 // 回收文件
	Restore         *CopyPast            `protobuf:"bytes,19,opt,name=restore,proto3,oneof" json:"restore,omitempty"`                 // 恢复被回收的文件
	CdBurn          *CDBurn              `protobuf:"bytes,20,opt,name=cdBurn,proto3,oneof" json:"cdBurn,omitempty"`                   // 刻盘
	ChangeAttr      *ChangeAttributes    `protobuf:"bytes,21,opt,name=changeAttr,proto3,oneof" json:"changeAttr,omitempty"`           // 改变文件属性
	FtpSend         *FtpSend             `protobuf:"bytes,22,opt,name=ftpSend,proto3,oneof" json:"ftpSend,omitempty"`                 // FTP上传
	Kill            *Kill                `protobuf:"bytes,23,opt,name=kill,proto3,oneof" json:"kill,omitempty"`                       // 终止运行
	Run             *Run                 `protobuf:"bytes,24,opt,name=run,proto3,oneof" json:"run,omitempty"`                         // 启动运行
	BeginEdit       *BeginEdit           `protobuf:"bytes,25,opt,name=beginEdit,proto3,oneof" json:"beginEdit,omitempty"`             // 开始编辑
	EndEdit         *EndEdit             `protobuf:"bytes,26,opt,name=endEdit,proto3,oneof" json:"endEdit,omitempty"`                 // 结束编辑
	BeginRead       *BeginRead           `protobuf:"bytes,27,opt,name=beginRead,proto3,oneof" json:"beginRead,omitempty"`             // 开始阅读
	EndRead         *EndRead             `protobuf:"bytes,28,opt,name=endRead,proto3,oneof" json:"endRead,omitempty"`                 // 结束阅读
	WriteTag        *WriteTag            `protobuf:"bytes,29,opt,name=WriteTag,proto3,oneof" json:"WriteTag,omitempty"`               // 写TAG
	RenameFolder    *RenameFolder        `protobuf:"bytes,30,opt,name=renameFolder,proto3,oneof" json:"renameFolder,omitempty"`       // 重命名文件夹
	ChangeRegVal    *ChangeRegistryValue `protobuf:"bytes,31,opt,name=changeRegVal,proto3,oneof" json:"changeRegVal,omitempty"`       // 修改注册表
	PermissionEvent *PermissionEvent     `protobuf:"bytes,32,opt,name=permissionEvent,proto3,oneof" json:"permissionEvent,omitempty"` // 策略保护事件
	Print           *Print               `protobuf:"bytes,33,opt,name=print,proto3,oneof" json:"print,omitempty"`                     // 打印
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_Event_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_Event_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_Event_proto_rawDescGZIP(), []int{32}
}

func (x *Event) GetUpload() *Upload {
	if x != nil {
		return x.Upload
	}
	return nil
}

func (x *Event) GetDownload() *Download {
	if x != nil {
		return x.Download
	}
	return nil
}

func (x *Event) GetAccess() *Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *Event) GetZip() *Zip {
	if x != nil {
		return x.Zip
	}
	return nil
}

func (x *Event) GetUnzip() *Unzip {
	if x != nil {
		return x.Unzip
	}
	return nil
}

func (x *Event) GetPastContent() *CopyPast {
	if x != nil {
		return x.PastContent
	}
	return nil
}

func (x *Event) GetCopy() *CopyPast {
	if x != nil {
		return x.Copy
	}
	return nil
}

func (x *Event) GetSaveAs() *CopyPast {
	if x != nil {
		return x.SaveAs
	}
	return nil
}

func (x *Event) GetRename() *CopyPast {
	if x != nil {
		return x.Rename
	}
	return nil
}

func (x *Event) GetEdit() *CopyPast {
	if x != nil {
		return x.Edit
	}
	return nil
}

func (x *Event) GetCreate() *Create {
	if x != nil {
		return x.Create
	}
	return nil
}

func (x *Event) GetInsertObject() *InsertObject {
	if x != nil {
		return x.InsertObject
	}
	return nil
}

func (x *Event) GetInsertFile() *InsertObject {
	if x != nil {
		return x.InsertFile
	}
	return nil
}

func (x *Event) GetMove() *CopyPast {
	if x != nil {
		return x.Move
	}
	return nil
}

func (x *Event) GetDelete() *Delete {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *Event) GetEncrypt() *CopyPast {
	if x != nil {
		return x.Encrypt
	}
	return nil
}

func (x *Event) GetDecrypt() *CopyPast {
	if x != nil {
		return x.Decrypt
	}
	return nil
}

func (x *Event) GetRecycle() *CopyPast {
	if x != nil {
		return x.Recycle
	}
	return nil
}

func (x *Event) GetRestore() *CopyPast {
	if x != nil {
		return x.Restore
	}
	return nil
}

func (x *Event) GetCdBurn() *CDBurn {
	if x != nil {
		return x.CdBurn
	}
	return nil
}

func (x *Event) GetChangeAttr() *ChangeAttributes {
	if x != nil {
		return x.ChangeAttr
	}
	return nil
}

func (x *Event) GetFtpSend() *FtpSend {
	if x != nil {
		return x.FtpSend
	}
	return nil
}

func (x *Event) GetKill() *Kill {
	if x != nil {
		return x.Kill
	}
	return nil
}

func (x *Event) GetRun() *Run {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *Event) GetBeginEdit() *BeginEdit {
	if x != nil {
		return x.BeginEdit
	}
	return nil
}

func (x *Event) GetEndEdit() *EndEdit {
	if x != nil {
		return x.EndEdit
	}
	return nil
}

func (x *Event) GetBeginRead() *BeginRead {
	if x != nil {
		return x.BeginRead
	}
	return nil
}

func (x *Event) GetEndRead() *EndRead {
	if x != nil {
		return x.EndRead
	}
	return nil
}

func (x *Event) GetWriteTag() *WriteTag {
	if x != nil {
		return x.WriteTag
	}
	return nil
}

func (x *Event) GetRenameFolder() *RenameFolder {
	if x != nil {
		return x.RenameFolder
	}
	return nil
}

func (x *Event) GetChangeRegVal() *ChangeRegistryValue {
	if x != nil {
		return x.ChangeRegVal
	}
	return nil
}

func (x *Event) GetPermissionEvent() *PermissionEvent {
	if x != nil {
		return x.PermissionEvent
	}
	return nil
}

func (x *Event) GetPrint() *Print {
	if x != nil {
		return x.Print
	}
	return nil
}

var File_Event_proto protoreflect.FileDescriptor

var file_Event_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x45, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xe2, 0x01, 0x0a, 0x06, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x29,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xda,
	0x01, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x06,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x34, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xe8, 0x02, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x5a, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36,
	0x0a, 0x07, 0x7a, 0x69, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x7a,
	0x69, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x68, 0x61, 0x31,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x68, 0x61, 0x31, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e,
	0x5a, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x5a,
	0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x22, 0x4b, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x5a, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x12,
	0x1b, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x20, 0x0a, 0x03,
	0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x5a, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x64, 0x65, 0x73, 0x22, 0x6b,
	0x0a, 0x03, 0x5a, 0x69, 0x70, 0x12, 0x2d, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x5a, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x6e, 0x7a, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x03, 0x73,
	0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x5a, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x1b, 0x0a,
	0x03, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x64, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x05, 0x55, 0x6e,
	0x7a, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x55, 0x6e, 0x7a, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x08,
	0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x3d, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22,
	0x68, 0x0a, 0x06, 0x43, 0x44, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x86, 0x02, 0x0a, 0x07, 0x46, 0x74, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x29, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4e, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x58, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x04, 0x4b, 0x69,
	0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x3a, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x33,
	0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x64, 0x69,
	0x74, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x01,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x29, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x08, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x33,
	0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x6d, 0x64, 0x35, 0x22, 0x5e, 0x0a, 0x0b, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x24, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x86, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x73, 0x72, 0x63, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x09, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x64, 0x65, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x77, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x9c, 0x0e, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x01, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x02, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03,
	0x7a, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x5a, 0x69, 0x70, 0x48,
	0x03, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x75, 0x6e, 0x7a,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x55, 0x6e, 0x7a, 0x69, 0x70,
	0x48, 0x04, 0x52, 0x05, 0x75, 0x6e, 0x7a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0b,
	0x70, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x73, 0x74, 0x48, 0x05, 0x52, 0x0b,
	0x70, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x50, 0x61, 0x73, 0x74, 0x48, 0x06, 0x52, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x61, 0x76, 0x65, 0x41, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x73, 0x74, 0x48, 0x07, 0x52,
	0x06, 0x73, 0x61, 0x76, 0x65, 0x41, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f, 0x70,
	0x79, 0x50, 0x61, 0x73, 0x74, 0x48, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x73, 0x74, 0x48, 0x09, 0x52, 0x04, 0x65,
	0x64, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x0a, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x48, 0x0b, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x73,
	0x74, 0x48, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x0e, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x73, 0x74, 0x48, 0x0f,
	0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x07,
	0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x73, 0x74, 0x48, 0x10, 0x52, 0x07, 0x64, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x61,
	0x73, 0x74, 0x48, 0x11, 0x52, 0x07, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x61, 0x73, 0x74, 0x48, 0x12, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x64,
	0x42, 0x75, 0x72, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x44, 0x42,
	0x75, 0x72, 0x6e, 0x48, 0x13, 0x52, 0x06, 0x63, 0x64, 0x42, 0x75, 0x72, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x14, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x07, 0x66, 0x74, 0x70, 0x53,
	0x65, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x74, 0x70, 0x53,
	0x65, 0x6e, 0x64, 0x48, 0x15, 0x52, 0x07, 0x66, 0x74, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x48, 0x16, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04,
	0x2e, 0x52, 0x75, 0x6e, 0x48, 0x17, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x48, 0x18, 0x52,
	0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x45, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x48, 0x19, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x45,
	0x64, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x1a, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64,
	0x48, 0x1b, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x08, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x67, 0x48, 0x1c, 0x52, 0x08, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48,
	0x1d, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x56,
	0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x1e,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x56, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x1f, 0x52, 0x0f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x48, 0x20, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x7a, 0x69, 0x70,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x6e, 0x7a, 0x69, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x70, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x41, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x64, 0x42, 0x75, 0x72, 0x6e, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x74, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x75, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x45, 0x64,
	0x69, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x56, 0x61, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Event_proto_rawDescOnce sync.Once
	file_Event_proto_rawDescData = file_Event_proto_rawDesc
)

func file_Event_proto_rawDescGZIP() []byte {
	file_Event_proto_rawDescOnce.Do(func() {
		file_Event_proto_rawDescData = protoimpl.X.CompressGZIP(file_Event_proto_rawDescData)
	})
	return file_Event_proto_rawDescData
}

var file_Event_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_Event_proto_goTypes = []any{
	(*NetFileInfo)(nil),            // 0: NetFileInfo
	(*Upload)(nil),                 // 1: Upload
	(*Download)(nil),               // 2: Download
	(*Access)(nil),                 // 3: Access
	(*FileInZipInfo)(nil),          // 4: FileInZipInfo
	(*FileZipMap)(nil),             // 5: FileZipMap
	(*Zip)(nil),                    // 6: Zip
	(*FileUnzipMap)(nil),           // 7: FileUnzipMap
	(*Unzip)(nil),                  // 8: Unzip
	(*CopyPast)(nil),               // 9: CopyPast
	(*Create)(nil),                 // 10: Create
	(*InsertObject)(nil),           // 11: InsertObject
	(*Delete)(nil),                 // 12: Delete
	(*CDBurn)(nil),                 // 13: CDBurn
	(*ChangeAttributes)(nil),       // 14: ChangeAttributes
	(*FtpSend)(nil),                // 15: FtpSend
	(*Kill)(nil),                   // 16: Kill
	(*Run)(nil),                    // 17: Run
	(*BeginEdit)(nil),              // 18: BeginEdit
	(*EndEdit)(nil),                // 19: EndEdit
	(*BeginRead)(nil),              // 20: BeginRead
	(*EndRead)(nil),                // 21: EndRead
	(*FileTagEntry)(nil),           // 22: FileTagEntry
	(*WriteTag)(nil),               // 23: WriteTag
	(*Content)(nil),                // 24: Content
	(*CopyContent)(nil),            // 25: CopyContent
	(*PasteContent)(nil),           // 26: PasteContent
	(*RenameFolder)(nil),           // 27: RenameFolder
	(*ChangeRegistryValue)(nil),    // 28: ChangeRegistryValue
	(*PolicyAttribute)(nil),        // 29: PolicyAttribute
	(*PermissionEvent)(nil),        // 30: PermissionEvent
	(*Print)(nil),                  // 31: Print
	(*Event)(nil),                  // 32: Event
	(*wrapperspb.StringValue)(nil), // 33: google.protobuf.StringValue
	(*FileInfo)(nil),               // 34: FileInfo
	(*ServerAddress)(nil),          // 35: ServerAddress
	(*wrapperspb.UInt64Value)(nil), // 36: google.protobuf.UInt64Value
	(*wrapperspb.Int32Value)(nil),  // 37: google.protobuf.Int32Value
	(*wrapperspb.UInt32Value)(nil), // 38: google.protobuf.UInt32Value
}
var file_Event_proto_depIdxs = []int32{
	33,  // 0: NetFileInfo.fileUrl:type_name -> google.protobuf.StringValue
	33,  // 1: Upload.protocol:type_name -> google.protobuf.StringValue
	34,  // 2: Upload.sourceFile:type_name -> FileInfo
	35,  // 3: Upload.destinationServers:type_name -> ServerAddress
	34,  // 4: Upload.destinationFile:type_name -> FileInfo
	33,  // 5: Download.protocol:type_name -> google.protobuf.StringValue
	35,  // 6: Download.sourceServers:type_name -> ServerAddress
	34,  // 7: Download.sourceFile:type_name -> FileInfo
	34,  // 8: Download.destinationFile:type_name -> FileInfo
	33,  // 9: Access.protocol:type_name -> google.protobuf.StringValue
	35,  // 10: Access.sourceServers:type_name -> ServerAddress
	33,  // 11: Access.url:type_name -> google.protobuf.StringValue
	33,  // 12: FileInZipInfo.entityIdentity:type_name -> google.protobuf.StringValue
	33,  // 13: FileInZipInfo.zipPath:type_name -> google.protobuf.StringValue
	36,  // 14: FileInZipInfo.size:type_name -> google.protobuf.UInt64Value
	33,  // 15: FileInZipInfo.sha1:type_name -> google.protobuf.StringValue
	36,  // 16: FileInZipInfo.inZipTime:type_name -> google.protobuf.UInt64Value
	37,  // 17: FileInZipInfo.encrypted:type_name -> google.protobuf.Int32Value
	34,  // 18: FileZipMap.src:type_name -> FileInfo
	4,   // 19: FileZipMap.des:type_name -> FileInZipInfo
	5,   // 20: Zip.sourceFiles:type_name -> FileZipMap
	34,  // 21: Zip.destinationFiles:type_name -> FileInfo
	4,   // 22: FileUnzipMap.src:type_name -> FileInZipInfo
	34,  // 23: FileUnzipMap.des:type_name -> FileInfo
	34,  // 24: Unzip.sourceFiles:type_name -> FileInfo
	7,   // 25: Unzip.destinationFiles:type_name -> FileUnzipMap
	34,  // 26: CopyPast.sourceFile:type_name -> FileInfo
	34,  // 27: CopyPast.destinationFile:type_name -> FileInfo
	34,  // 28: CopyPast.overwriteFile:type_name -> FileInfo
	34,  // 29: Create.destinationFile:type_name -> FileInfo
	34,  // 30: InsertObject.sourceFile:type_name -> FileInfo
	34,  // 31: InsertObject.destinationFile:type_name -> FileInfo
	34,  // 32: InsertObject.insertedFiles:type_name -> FileInfo
	34,  // 33: Delete.sourceFile:type_name -> FileInfo
	34,  // 34: CDBurn.sourceFile:type_name -> FileInfo
	34,  // 35: CDBurn.destinationFile:type_name -> FileInfo
	34,  // 36: ChangeAttributes.destinationFile:type_name -> FileInfo
	38,  // 37: ChangeAttributes.attributes:type_name -> google.protobuf.UInt32Value
	34,  // 38: FtpSend.sourceFile:type_name -> FileInfo
	35,  // 39: FtpSend.destinationServers:type_name -> ServerAddress
	0,   // 40: FtpSend.destinationFile:type_name -> NetFileInfo
	33,  // 41: FtpSend.destinationFileTagFileId:type_name -> google.protobuf.StringValue
	34,  // 42: Kill.destinationFile:type_name -> FileInfo
	34,  // 43: Run.destinationFile:type_name -> FileInfo
	34,  // 44: BeginEdit.sourceFile:type_name -> FileInfo
	34,  // 45: BeginEdit.destinationFile:type_name -> FileInfo
	36,  // 46: BeginEdit.beginTime:type_name -> google.protobuf.UInt64Value
	34,  // 47: EndEdit.sourceFile:type_name -> FileInfo
	34,  // 48: EndEdit.destinationFile:type_name -> FileInfo
	36,  // 49: EndEdit.endTime:type_name -> google.protobuf.UInt64Value
	34,  // 50: BeginRead.sourceFile:type_name -> FileInfo
	34,  // 51: BeginRead.destinationFile:type_name -> FileInfo
	36,  // 52: BeginRead.beginTime:type_name -> google.protobuf.UInt64Value
	34,  // 53: EndRead.sourceFile:type_name -> FileInfo
	34,  // 54: EndRead.destinationFile:type_name -> FileInfo
	36,  // 55: EndRead.endTime:type_name -> google.protobuf.UInt64Value
	33,  // 56: FileTagEntry.key:type_name -> google.protobuf.StringValue
	33,  // 57: FileTagEntry.value:type_name -> google.protobuf.StringValue
	36,  // 58: FileTagEntry.time:type_name -> google.protobuf.UInt64Value
	34,  // 59: WriteTag.sourceFile:type_name -> FileInfo
	34,  // 60: WriteTag.destinationFile:type_name -> FileInfo
	22,  // 61: WriteTag.beforeFileTags:type_name -> FileTagEntry
	22,  // 62: WriteTag.afterFileTags:type_name -> FileTagEntry
	33,  // 63: WriteTag.from:type_name -> google.protobuf.StringValue
	38,  // 64: Content.format:type_name -> google.protobuf.UInt32Value
	38,  // 65: Content.size:type_name -> google.protobuf.UInt32Value
	33,  // 66: Content.md5:type_name -> google.protobuf.StringValue
	34,  // 67: CopyContent.sourceFile:type_name -> FileInfo
	24,  // 68: CopyContent.contents:type_name -> Content
	34,  // 69: PasteContent.destinationFile:type_name -> FileInfo
	24,  // 70: PasteContent.contents:type_name -> Content
	33,  // 71: RenameFolder.srcFolder:type_name -> google.protobuf.StringValue
	33,  // 72: RenameFolder.desFolder:type_name -> google.protobuf.StringValue
	33,  // 73: ChangeRegistryValue.keyPath:type_name -> google.protobuf.StringValue
	33,  // 74: ChangeRegistryValue.valName:type_name -> google.protobuf.StringValue
	33,  // 75: PolicyAttribute.name:type_name -> google.protobuf.StringValue
	33,  // 76: PolicyAttribute.value:type_name -> google.protobuf.StringValue
	33,  // 77: PermissionEvent.eventName:type_name -> google.protobuf.StringValue
	33,  // 78: PermissionEvent.policyId:type_name -> google.protobuf.StringValue
	33,  // 79: PermissionEvent.policyDescription:type_name -> google.protobuf.StringValue
	29,  // 80: PermissionEvent.eventAttributes:type_name -> PolicyAttribute
	34,  // 81: Print.destinationFile:type_name -> FileInfo
	1,   // 82: Event.upload:type_name -> Upload
	2,   // 83: Event.download:type_name -> Download
	3,   // 84: Event.access:type_name -> Access
	6,   // 85: Event.zip:type_name -> Zip
	8,   // 86: Event.unzip:type_name -> Unzip
	9,   // 87: Event.pastContent:type_name -> CopyPast
	9,   // 88: Event.copy:type_name -> CopyPast
	9,   // 89: Event.saveAs:type_name -> CopyPast
	9,   // 90: Event.rename:type_name -> CopyPast
	9,   // 91: Event.edit:type_name -> CopyPast
	10,  // 92: Event.create:type_name -> Create
	11,  // 93: Event.insertObject:type_name -> InsertObject
	11,  // 94: Event.insertFile:type_name -> InsertObject
	9,   // 95: Event.move:type_name -> CopyPast
	12,  // 96: Event.delete:type_name -> Delete
	9,   // 97: Event.encrypt:type_name -> CopyPast
	9,   // 98: Event.decrypt:type_name -> CopyPast
	9,   // 99: Event.recycle:type_name -> CopyPast
	9,   // 100: Event.restore:type_name -> CopyPast
	13,  // 101: Event.cdBurn:type_name -> CDBurn
	14,  // 102: Event.changeAttr:type_name -> ChangeAttributes
	15,  // 103: Event.ftpSend:type_name -> FtpSend
	16,  // 104: Event.kill:type_name -> Kill
	17,  // 105: Event.run:type_name -> Run
	18,  // 106: Event.beginEdit:type_name -> BeginEdit
	19,  // 107: Event.endEdit:type_name -> EndEdit
	20,  // 108: Event.beginRead:type_name -> BeginRead
	21,  // 109: Event.endRead:type_name -> EndRead
	23,  // 110: Event.WriteTag:type_name -> WriteTag
	27,  // 111: Event.renameFolder:type_name -> RenameFolder
	28,  // 112: Event.changeRegVal:type_name -> ChangeRegistryValue
	30,  // 113: Event.permissionEvent:type_name -> PermissionEvent
	31,  // 114: Event.print:type_name -> Print
	115, // [115:115] is the sub-list for method output_type
	115, // [115:115] is the sub-list for method input_type
	115, // [115:115] is the sub-list for extension type_name
	115, // [115:115] is the sub-list for extension extendee
	0,   // [0:115] is the sub-list for field type_name
}

func init() { file_Event_proto_init() }
func file_Event_proto_init() {
	if File_Event_proto != nil {
		return
	}
	file_FileInfo_proto_init()
	file_ServerAddress_proto_init()
	file_Event_proto_msgTypes[32].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Event_proto_goTypes,
		DependencyIndexes: file_Event_proto_depIdxs,
		MessageInfos:      file_Event_proto_msgTypes,
	}.Build()
	File_Event_proto = out.File
	file_Event_proto_rawDesc = nil
	file_Event_proto_goTypes = nil
	file_Event_proto_depIdxs = nil
}
